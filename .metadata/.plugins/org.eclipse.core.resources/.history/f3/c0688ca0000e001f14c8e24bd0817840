/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan;

UART_HandleTypeDef huart1;

/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* USER CODE BEGIN PV */
HAL_StatusTypeDef retVal;
CAN_FilterTypeDef sFilterConfig;
CAN_TxHeaderTypeDef TxHeader;
CAN_RxHeaderTypeDef RxHeader;
uint32_t pTxMailbox;
uint32_t pRxMailbox;
uint32_t numCanRxMsg;
uint16_t UART_Size;	/* UART Data size */
uint8_t UART_TxData[19] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; /* UART Tx Data array */
uint8_t UART_RxData[19] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; /* UART Rx Data array */
uint8_t CAN_TxData[8] = {0,0,0,0,0,0,0,0};	/* CAN Tx Data array */
uint8_t CAN_RxData[8] = {0,0,0,0,0,0,0,0}; /* CAN Rx Data array */
uint8_t	loopCnt;			/* temp var for for loop */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN_Init(void);
static void MX_USART1_UART_Init(void);
void StartDefaultTask(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_CAN_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{

  /* USER CODE BEGIN CAN_Init 0 */

  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 9;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan.Init.TimeTriggeredMode = ENABLE;
  hcan.Init.AutoBusOff = ENABLE;
  hcan.Init.AutoWakeUp = ENABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = ENABLE;
  hcan.Init.TransmitFifoPriority = ENABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN_Init 2 */
	sFilterConfig.FilterIdHigh 			= 0;
	sFilterConfig.FilterIdLow 			= 0;
	sFilterConfig.FilterMaskIdHigh 		= 0;
	sFilterConfig.FilterMaskIdLow		= 0;
	sFilterConfig.FilterFIFOAssignment 	= CAN_FILTER_FIFO0;
	sFilterConfig.FilterBank 			= 0;
	sFilterConfig.FilterMode 			= CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale 			= CAN_FILTERSCALE_16BIT;
	sFilterConfig.FilterActivation 		= CAN_FILTER_ENABLE;
	sFilterConfig.SlaveStartFilterBank 	= 0;

	retVal = HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
	if (retVal != HAL_OK)
	{
		Error_Handler();
	}

	retVal = HAL_CAN_Start(&hcan);
	if (retVal != HAL_OK)
	{
		Error_Handler();
	}

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_FULL);
  /* USER CODE END CAN_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		/* CAN data received */
		numCanRxMsg = HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0);
		if(numCanRxMsg != 0)
		{
			/* Receive in CAN */
			retVal = HAL_CAN_GetRxMessage(&hcan, pRxMailbox, &RxHeader, CAN_RxData);
			if (retVal == HAL_OK)
			{
				// Ref: https://python-can.readthedocs.io/en/stable/interfaces/serial.html
				// +=============+===============+========================+=========================+=========================+=========+==============+
				// |    Desc     |Start of frame |Timestamp               | DLC                     | Arbitration ID          | Payload | End of frame |
				// +=============+===============+========================+=========================+=========================+=========+==============+
				// |Length (Byte)|1              |4                       | 1                       | 4                       | 0 - 8   | 1            |
				// +-------------+---------------+------------------------+-------------------------+-------------------------+---------+--------------+
				// |Data type    |Byte           |Unsigned 4 byte integer | Unsigned 1 byte integer | Unsigned 4 byte integer | Byte    | Byte         |
				// +-------------+---------------+------------------------+-------------------------+-------------------------+---------+--------------+
				// |Byte order   |-              |Little-Endian           | Little-Endian           | Little-Endian           | -       | -            |
				// +-------------+---------------+------------------------+-------------------------+-------------------------+---------+--------------+
				// |Value        |0xAA           |Usually s, ms or µs     | Payload Length in byte  | -                       | -       | 0xBB         |
				// +-------------+---------------+------------------------+-------------------------+-------------------------+---------+--------------+

				UNUSED(pRxMailbox);
				/* Start of frame */
				UART_TxData[0] = 0xAA;
				/* Timestamp */
				UART_TxData[1] = (RxHeader.Timestamp & 0x000000FF);
				UART_TxData[2] = (RxHeader.Timestamp & 0x0000FF00)>>8;
				UART_TxData[3] = (RxHeader.Timestamp & 0x00FF0000)>>16;
				UART_TxData[4] = (RxHeader.Timestamp & 0xFF000000)>>24;
				/* DLC */
				UART_TxData[5] = (uint8_t)RxHeader.DLC;
				/* Arbitration ID
				 * StdId or ExtId check done */
				if(RxHeader.StdId > 0)
				{
					UART_TxData[6] = (RxHeader.StdId & 0x000000FF);
					UART_TxData[7] = (RxHeader.StdId & 0x0000FF00)>>8;
					UART_TxData[8] = (RxHeader.StdId & 0x00FF0000)>>16;
					UART_TxData[9] = (RxHeader.StdId & 0xFF000000)>>24;
				}
				else /* ExtId */
				{
					UART_TxData[6] = (RxHeader.ExtId & 0x000000FF);
					UART_TxData[7] = (RxHeader.ExtId & 0x0000FF00)>>8;
					UART_TxData[8] = (RxHeader.ExtId & 0x00FF0000)>>16;
					UART_TxData[9] = (RxHeader.ExtId & 0xFF000000)>>24;
				}
				/* Payload */
				for(loopCnt=0; loopCnt<UART_TxData[5]; loopCnt++)
				{
					UART_TxData[10+loopCnt] = CAN_RxData[loopCnt];
				}
				/* End of frame */
				UART_TxData[10+loopCnt] = 0xBB;
				/* Size of UART total data */
				UART_Size = 11+loopCnt;

				/* Send in UART */
				retVal = HAL_UART_Transmit_IT(&huart1, UART_TxData, UART_Size);
				if (retVal != HAL_OK)
				{
					Error_Handler();
				}
			}
			else
			{
				Error_Handler();
			}
		}

		/* UART data received */
		if(1)
		{
			/* Receive in UART */
			retVal = HAL_UART_Receive_IT(&huart1, UART_RxData, UART_Size);
			if (retVal == HAL_OK)
			{
				// Ref: https://python-can.readthedocs.io/en/stable/interfaces/serial.html
				// +=============+===============+========================+=========================+=========================+=========+==============+
				// |    Desc     |Start of frame |Timestamp               | DLC                     | Arbitration ID          | Payload | End of frame |
				// +=============+===============+========================+=========================+=========================+=========+==============+
				// |Length (Byte)|1              |4                       | 1                       | 4                       | 0 - 8   | 1            |
				// +-------------+---------------+------------------------+-------------------------+-------------------------+---------+--------------+
				// |Data type    |Byte           |Unsigned 4 byte integer | Unsigned 1 byte integer | Unsigned 4 byte integer | Byte    | Byte         |
				// +-------------+---------------+------------------------+-------------------------+-------------------------+---------+--------------+
				// |Byte order   |-              |Little-Endian           | Little-Endian           | Little-Endian           | -       | -            |
				// +-------------+---------------+------------------------+-------------------------+-------------------------+---------+--------------+
				// |Value        |0xAA           |Usually s, ms or µs     | Payload Length in byte  | -                       | -       | 0xBB         |
				// +-------------+---------------+------------------------+-------------------------+-------------------------+---------+--------------+

				/* Check if the received is a valid slCan data
				 * Check the UART size and Start of frame */
				if((UART_Size!=0) &&
						(UART_RxData[0]==0xAA))
				{
					/* Timestamp
					 * This param is unused at the moment and thus ignored
					 * UART_RxData[1]
					 * UART_RxData[2]
					 * UART_RxData[3]
					 * UART_RxData[4]  */
					TxHeader.TransmitGlobalTime = DISABLE;
					/* DLC */
					TxHeader.DLC				= UART_RxData[5];
					/* Arbitration ID */
					TxHeader.ExtId				= ((UART_RxData[6] >> 24) |\
													(UART_RxData[7] >> 16)|\
													 (UART_RxData[8] >> 8)|\
													  (UART_RxData[9]));
					/* To decide if it's a ExtId or StdId */
					if(TxHeader.ExtId < 0x800)
					{
						TxHeader.StdId = TxHeader.ExtId;
						TxHeader.ExtId = 0;
						TxHeader.IDE   = CAN_ID_STD;
					}
					else
					{
						TxHeader.StdId = 0;
						/* TxHeader.ExtId holds the same above value */
						TxHeader.IDE   = CAN_ID_EXT;
					}
					/* Payload */
					for(loopCnt=0; loopCnt<UART_TxData[5]; loopCnt++)
					{
						CAN_TxData[loopCnt] = UART_RxData[10+loopCnt];
					}

					/* Check if End of frame and UART Size is correct */
					if((UART_RxData[11+loopCnt] == 0xBB) &&
							(UART_Size == (11+loopCnt)))
					{
						/* Fill the other param needed for CANTx */
						TxHeader.RTR = CAN_RTR_DATA;
						pTxMailbox = CAN_TX_MAILBOX0;

						/* Send in CAN */
						retVal = HAL_CAN_AddTxMessage(&hcan, &TxHeader, CAN_TxData, &pTxMailbox);
						if (retVal != HAL_OK)
						{
							Error_Handler();
						}
					}
					else /* UART received seems to be not complete */
					{
						Error_Handler();
					}
				}
			}
			else
			{
				Error_Handler();
			}
		}
	}
  /* USER CODE END 5 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		/* Toggle LED at PIN13 */
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		osDelay(1000);
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
