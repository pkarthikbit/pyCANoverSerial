
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b34  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005c44  08005c44  00006c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cb8  08005cb8  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005cb8  08005cb8  00007010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005cb8  08005cb8  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cb8  08005cb8  00006cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cbc  08005cbc  00006cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005cc0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a24  20000010  08005cd0  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a34  08005cd0  00007a34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001298e  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e01  00000000  00000000  000199c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  0001c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c32  00000000  00000000  0001d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000297f  00000000  00000000  0001e3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108da  00000000  00000000  00020d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e969  00000000  00000000  00031633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bff9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a0  00000000  00000000  000bffe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c4180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c2c 	.word	0x08005c2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005c2c 	.word	0x08005c2c

08000150 <HAL_CAN_RxFifo0FullCallback>:
static void MX_USART1_UART_Init(void);
void StartDefaultTask(void *argument);

/* USER CODE BEGIN PFP */
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b092      	sub	sp, #72	@ 0x48
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint32_t pRxMailbox = CAN_RX_FIFO0;
 8000158:	2300      	movs	r3, #0
 800015a:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t CAN_RxData[8] = {0,0,0,0,0,0,0,0}; /* CAN Rx Data array */
 800015c:	f107 0320 	add.w	r3, r7, #32
 8000160:	2200      	movs	r2, #0
 8000162:	601a      	str	r2, [r3, #0]
 8000164:	605a      	str	r2, [r3, #4]
	uint8_t UART_TxData[19] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; /* UART Tx Data array */
 8000166:	f107 030c 	add.w	r3, r7, #12
 800016a:	2200      	movs	r2, #0
 800016c:	601a      	str	r2, [r3, #0]
 800016e:	605a      	str	r2, [r3, #4]
 8000170:	609a      	str	r2, [r3, #8]
 8000172:	60da      	str	r2, [r3, #12]
 8000174:	f8c3 200f 	str.w	r2, [r3, #15]

	/* Receive in CAN */
	retVal = HAL_CAN_GetRxMessage(hcan, pRxMailbox, &RxHeader, CAN_RxData);
 8000178:	f107 0320 	add.w	r3, r7, #32
 800017c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000180:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000182:	6878      	ldr	r0, [r7, #4]
 8000184:	f000 ff2b 	bl	8000fde <HAL_CAN_GetRxMessage>
 8000188:	4603      	mov	r3, r0
 800018a:	461a      	mov	r2, r3
 800018c:	4b3b      	ldr	r3, [pc, #236]	@ (800027c <HAL_CAN_RxFifo0FullCallback+0x12c>)
 800018e:	701a      	strb	r2, [r3, #0]
	if (retVal == HAL_OK)
 8000190:	4b3a      	ldr	r3, [pc, #232]	@ (800027c <HAL_CAN_RxFifo0FullCallback+0x12c>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d16b      	bne.n	8000270 <HAL_CAN_RxFifo0FullCallback+0x120>
		// +-------------+---------------+------------------------+-------------------------+-------------------------+---------+--------------+
		// |Value        |0xAA           |Usually s, ms or Âµs     | Payload Length in byte  | -                       | -       | 0xBB         |
		// +-------------+---------------+------------------------+-------------------------+-------------------------+---------+--------------+

		/* Start of frame */
		UART_TxData[0] = 0xAA;
 8000198:	23aa      	movs	r3, #170	@ 0xaa
 800019a:	733b      	strb	r3, [r7, #12]
		/* Timestamp */
		UART_TxData[1] = (RxHeader.Timestamp & 0xFF000000)>>24;
 800019c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800019e:	0e1b      	lsrs	r3, r3, #24
 80001a0:	b2db      	uxtb	r3, r3
 80001a2:	737b      	strb	r3, [r7, #13]
		UART_TxData[2] = (RxHeader.Timestamp & 0x00FF0000)>>16;
 80001a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80001a6:	0c1b      	lsrs	r3, r3, #16
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	73bb      	strb	r3, [r7, #14]
		UART_TxData[3] = (RxHeader.Timestamp & 0x0000FF00)>>8;
 80001ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80001ae:	0a1b      	lsrs	r3, r3, #8
 80001b0:	b2db      	uxtb	r3, r3
 80001b2:	73fb      	strb	r3, [r7, #15]
		UART_TxData[4] = (RxHeader.Timestamp & 0x000000FF);
 80001b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	743b      	strb	r3, [r7, #16]

		/* DLC */
		UART_TxData[5] = (uint8_t)RxHeader.DLC;
 80001ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	747b      	strb	r3, [r7, #17]
		/* Arbitration ID
		 * StdId or ExtId check done */
		if(RxHeader.IDE == CAN_ID_STD)
 80001c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d10f      	bne.n	80001e6 <HAL_CAN_RxFifo0FullCallback+0x96>
		{
			UART_TxData[6] = (RxHeader.StdId & 0xFF000000)>>24;
 80001c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80001c8:	0e1b      	lsrs	r3, r3, #24
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	74bb      	strb	r3, [r7, #18]
			UART_TxData[7] = (RxHeader.StdId & 0x00FF0000)>>16;
 80001ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80001d0:	0c1b      	lsrs	r3, r3, #16
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	74fb      	strb	r3, [r7, #19]
			UART_TxData[8] = (RxHeader.StdId & 0x0000FF00)>>8;
 80001d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80001d8:	0a1b      	lsrs	r3, r3, #8
 80001da:	b2db      	uxtb	r3, r3
 80001dc:	753b      	strb	r3, [r7, #20]
			UART_TxData[9] = (RxHeader.StdId & 0x000000FF);
 80001de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	757b      	strb	r3, [r7, #21]
 80001e4:	e00e      	b.n	8000204 <HAL_CAN_RxFifo0FullCallback+0xb4>
		}
		else /* ExtId */
		{
			UART_TxData[6] = (RxHeader.ExtId & 0xFF000000)>>24;
 80001e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80001e8:	0e1b      	lsrs	r3, r3, #24
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	74bb      	strb	r3, [r7, #18]
			UART_TxData[7] = (RxHeader.ExtId & 0x00FF0000)>>16;
 80001ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80001f0:	0c1b      	lsrs	r3, r3, #16
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	74fb      	strb	r3, [r7, #19]
			UART_TxData[8] = (RxHeader.ExtId & 0x0000FF00)>>8;
 80001f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80001f8:	0a1b      	lsrs	r3, r3, #8
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	753b      	strb	r3, [r7, #20]
			UART_TxData[9] = (RxHeader.ExtId & 0x000000FF);
 80001fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000200:	b2db      	uxtb	r3, r3
 8000202:	757b      	strb	r3, [r7, #21]
		}
		/* Payload */
		for(loopCnt=0; loopCnt<8; loopCnt++)
 8000204:	4b1e      	ldr	r3, [pc, #120]	@ (8000280 <HAL_CAN_RxFifo0FullCallback+0x130>)
 8000206:	2200      	movs	r2, #0
 8000208:	701a      	strb	r2, [r3, #0]
 800020a:	e013      	b.n	8000234 <HAL_CAN_RxFifo0FullCallback+0xe4>
		{
			UART_TxData[10+loopCnt] = CAN_RxData[loopCnt];
 800020c:	4b1c      	ldr	r3, [pc, #112]	@ (8000280 <HAL_CAN_RxFifo0FullCallback+0x130>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	461a      	mov	r2, r3
 8000212:	4b1b      	ldr	r3, [pc, #108]	@ (8000280 <HAL_CAN_RxFifo0FullCallback+0x130>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	330a      	adds	r3, #10
 8000218:	3248      	adds	r2, #72	@ 0x48
 800021a:	443a      	add	r2, r7
 800021c:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8000220:	3348      	adds	r3, #72	@ 0x48
 8000222:	443b      	add	r3, r7
 8000224:	f803 2c3c 	strb.w	r2, [r3, #-60]
		for(loopCnt=0; loopCnt<8; loopCnt++)
 8000228:	4b15      	ldr	r3, [pc, #84]	@ (8000280 <HAL_CAN_RxFifo0FullCallback+0x130>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b13      	ldr	r3, [pc, #76]	@ (8000280 <HAL_CAN_RxFifo0FullCallback+0x130>)
 8000232:	701a      	strb	r2, [r3, #0]
 8000234:	4b12      	ldr	r3, [pc, #72]	@ (8000280 <HAL_CAN_RxFifo0FullCallback+0x130>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b07      	cmp	r3, #7
 800023a:	d9e7      	bls.n	800020c <HAL_CAN_RxFifo0FullCallback+0xbc>
		}
		/* End of frame */
		UART_TxData[10+loopCnt] = 0xBB;
 800023c:	4b10      	ldr	r3, [pc, #64]	@ (8000280 <HAL_CAN_RxFifo0FullCallback+0x130>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	330a      	adds	r3, #10
 8000242:	3348      	adds	r3, #72	@ 0x48
 8000244:	443b      	add	r3, r7
 8000246:	22bb      	movs	r2, #187	@ 0xbb
 8000248:	f803 2c3c 	strb.w	r2, [r3, #-60]

		/* Send in UART */
		retVal = HAL_UART_Transmit_IT(&huart1, UART_TxData, 19);
 800024c:	f107 030c 	add.w	r3, r7, #12
 8000250:	2213      	movs	r2, #19
 8000252:	4619      	mov	r1, r3
 8000254:	480b      	ldr	r0, [pc, #44]	@ (8000284 <HAL_CAN_RxFifo0FullCallback+0x134>)
 8000256:	f002 fa01 	bl	800265c <HAL_UART_Transmit_IT>
 800025a:	4603      	mov	r3, r0
 800025c:	461a      	mov	r2, r3
 800025e:	4b07      	ldr	r3, [pc, #28]	@ (800027c <HAL_CAN_RxFifo0FullCallback+0x12c>)
 8000260:	701a      	strb	r2, [r3, #0]
		if (retVal != HAL_OK)
 8000262:	4b06      	ldr	r3, [pc, #24]	@ (800027c <HAL_CAN_RxFifo0FullCallback+0x12c>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d004      	beq.n	8000274 <HAL_CAN_RxFifo0FullCallback+0x124>
		{
			Error_Handler();
 800026a:	f000 fa1d 	bl	80006a8 <Error_Handler>
	}
	else
	{
		Error_Handler();
	}
}
 800026e:	e001      	b.n	8000274 <HAL_CAN_RxFifo0FullCallback+0x124>
		Error_Handler();
 8000270:	f000 fa1a 	bl	80006a8 <Error_Handler>
}
 8000274:	bf00      	nop
 8000276:	3748      	adds	r7, #72	@ 0x48
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	200000a0 	.word	0x200000a0
 8000280:	200000df 	.word	0x200000df
 8000284:	20000054 	.word	0x20000054

08000288 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b08c      	sub	sp, #48	@ 0x30
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t pTxMailbox;
	uint8_t CAN_TxData[8] = {0,0,0,0,0,0,0,0};	/* CAN Tx Data array */
 8000290:	f107 030c 	add.w	r3, r7, #12
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]

	/* Receive in UART */
	retVal = HAL_UART_Receive_IT(huart, UART_RxData, 19);
 800029a:	2213      	movs	r2, #19
 800029c:	4938      	ldr	r1, [pc, #224]	@ (8000380 <HAL_UART_RxCpltCallback+0xf8>)
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f002 fa11 	bl	80026c6 <HAL_UART_Receive_IT>
 80002a4:	4603      	mov	r3, r0
 80002a6:	461a      	mov	r2, r3
 80002a8:	4b36      	ldr	r3, [pc, #216]	@ (8000384 <HAL_UART_RxCpltCallback+0xfc>)
 80002aa:	701a      	strb	r2, [r3, #0]
	if (retVal == HAL_OK)
 80002ac:	4b35      	ldr	r3, [pc, #212]	@ (8000384 <HAL_UART_RxCpltCallback+0xfc>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d15e      	bne.n	8000372 <HAL_UART_RxCpltCallback+0xea>
		// +-------------+---------------+------------------------+-------------------------+-------------------------+---------+--------------+
		// |Value        |0xAA           |Usually s, ms or Âµs     | Payload Length in byte  | -                       | -       | 0xBB         |
		// +-------------+---------------+------------------------+-------------------------+-------------------------+---------+--------------+

		/* Start of frame and End of frame checked to process the received data */
		if((UART_RxData[0] == 0xAA) &&
 80002b4:	4b32      	ldr	r3, [pc, #200]	@ (8000380 <HAL_UART_RxCpltCallback+0xf8>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2baa      	cmp	r3, #170	@ 0xaa
 80002ba:	d15c      	bne.n	8000376 <HAL_UART_RxCpltCallback+0xee>
				(UART_RxData[18] == 0xBB))
 80002bc:	4b30      	ldr	r3, [pc, #192]	@ (8000380 <HAL_UART_RxCpltCallback+0xf8>)
 80002be:	7c9b      	ldrb	r3, [r3, #18]
		if((UART_RxData[0] == 0xAA) &&
 80002c0:	2bbb      	cmp	r3, #187	@ 0xbb
 80002c2:	d158      	bne.n	8000376 <HAL_UART_RxCpltCallback+0xee>
			 * This param is unused at the moment and thus ignored
			 * UART_RxData[1]
			 * UART_RxData[2]
			 * UART_RxData[3]
			 * UART_RxData[4]  */
			TxHeader.TransmitGlobalTime = DISABLE;
 80002c4:	2300      	movs	r3, #0
 80002c6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			/* DLC */
			TxHeader.DLC				= UART_RxData[5];
 80002ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000380 <HAL_UART_RxCpltCallback+0xf8>)
 80002cc:	795b      	ldrb	r3, [r3, #5]
 80002ce:	62bb      	str	r3, [r7, #40]	@ 0x28
			/* Arbitration ID */
			TxHeader.ExtId				= ((UART_RxData[6] << 24) |\
 80002d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000380 <HAL_UART_RxCpltCallback+0xf8>)
 80002d2:	799b      	ldrb	r3, [r3, #6]
 80002d4:	061a      	lsls	r2, r3, #24
											(UART_RxData[7] << 16)|\
 80002d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000380 <HAL_UART_RxCpltCallback+0xf8>)
 80002d8:	79db      	ldrb	r3, [r3, #7]
 80002da:	041b      	lsls	r3, r3, #16
			TxHeader.ExtId				= ((UART_RxData[6] << 24) |\
 80002dc:	431a      	orrs	r2, r3
											 (UART_RxData[8] << 8)|\
 80002de:	4b28      	ldr	r3, [pc, #160]	@ (8000380 <HAL_UART_RxCpltCallback+0xf8>)
 80002e0:	7a1b      	ldrb	r3, [r3, #8]
 80002e2:	021b      	lsls	r3, r3, #8
											(UART_RxData[7] << 16)|\
 80002e4:	4313      	orrs	r3, r2
											  (UART_RxData[9]));
 80002e6:	4a26      	ldr	r2, [pc, #152]	@ (8000380 <HAL_UART_RxCpltCallback+0xf8>)
 80002e8:	7a52      	ldrb	r2, [r2, #9]
											 (UART_RxData[8] << 8)|\
 80002ea:	4313      	orrs	r3, r2
			TxHeader.ExtId				= ((UART_RxData[6] << 24) |\
 80002ec:	61fb      	str	r3, [r7, #28]
			/* To decide if it's a ExtId or StdId */
			if(TxHeader.ExtId < 0x800)
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80002f4:	d206      	bcs.n	8000304 <HAL_UART_RxCpltCallback+0x7c>
			{
				TxHeader.StdId = TxHeader.ExtId;
 80002f6:	69fb      	ldr	r3, [r7, #28]
 80002f8:	61bb      	str	r3, [r7, #24]
				TxHeader.ExtId = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	61fb      	str	r3, [r7, #28]
				TxHeader.IDE   = CAN_ID_STD;
 80002fe:	2300      	movs	r3, #0
 8000300:	623b      	str	r3, [r7, #32]
 8000302:	e003      	b.n	800030c <HAL_UART_RxCpltCallback+0x84>
			}
			else
			{
				TxHeader.StdId = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	61bb      	str	r3, [r7, #24]
				/* TxHeader.ExtId holds the same above value */
				TxHeader.IDE   = CAN_ID_EXT;
 8000308:	2304      	movs	r3, #4
 800030a:	623b      	str	r3, [r7, #32]
			}
			/* Payload */
			for(loopCnt=0; loopCnt<8; loopCnt++)
 800030c:	4b1e      	ldr	r3, [pc, #120]	@ (8000388 <HAL_UART_RxCpltCallback+0x100>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
 8000312:	e012      	b.n	800033a <HAL_UART_RxCpltCallback+0xb2>
			{
				CAN_TxData[loopCnt] = UART_RxData[10+loopCnt];
 8000314:	4b1c      	ldr	r3, [pc, #112]	@ (8000388 <HAL_UART_RxCpltCallback+0x100>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	330a      	adds	r3, #10
 800031a:	4a1b      	ldr	r2, [pc, #108]	@ (8000388 <HAL_UART_RxCpltCallback+0x100>)
 800031c:	7812      	ldrb	r2, [r2, #0]
 800031e:	4611      	mov	r1, r2
 8000320:	4a17      	ldr	r2, [pc, #92]	@ (8000380 <HAL_UART_RxCpltCallback+0xf8>)
 8000322:	5cd2      	ldrb	r2, [r2, r3]
 8000324:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8000328:	443b      	add	r3, r7
 800032a:	f803 2c24 	strb.w	r2, [r3, #-36]
			for(loopCnt=0; loopCnt<8; loopCnt++)
 800032e:	4b16      	ldr	r3, [pc, #88]	@ (8000388 <HAL_UART_RxCpltCallback+0x100>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	3301      	adds	r3, #1
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <HAL_UART_RxCpltCallback+0x100>)
 8000338:	701a      	strb	r2, [r3, #0]
 800033a:	4b13      	ldr	r3, [pc, #76]	@ (8000388 <HAL_UART_RxCpltCallback+0x100>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b07      	cmp	r3, #7
 8000340:	d9e8      	bls.n	8000314 <HAL_UART_RxCpltCallback+0x8c>
			}

			/* Fill the other param needed for CANTx */
			TxHeader.RTR = CAN_RTR_DATA;
 8000342:	2300      	movs	r3, #0
 8000344:	627b      	str	r3, [r7, #36]	@ 0x24
			pTxMailbox = CAN_TX_MAILBOX0;
 8000346:	2301      	movs	r3, #1
 8000348:	617b      	str	r3, [r7, #20]

			/* Send in CAN */
			retVal = HAL_CAN_AddTxMessage(&hcan, &TxHeader, CAN_TxData, &pTxMailbox);
 800034a:	f107 0314 	add.w	r3, r7, #20
 800034e:	f107 020c 	add.w	r2, r7, #12
 8000352:	f107 0118 	add.w	r1, r7, #24
 8000356:	480d      	ldr	r0, [pc, #52]	@ (800038c <HAL_UART_RxCpltCallback+0x104>)
 8000358:	f000 fd72 	bl	8000e40 <HAL_CAN_AddTxMessage>
 800035c:	4603      	mov	r3, r0
 800035e:	461a      	mov	r2, r3
 8000360:	4b08      	ldr	r3, [pc, #32]	@ (8000384 <HAL_UART_RxCpltCallback+0xfc>)
 8000362:	701a      	strb	r2, [r3, #0]
			if (retVal != HAL_OK)
 8000364:	4b07      	ldr	r3, [pc, #28]	@ (8000384 <HAL_UART_RxCpltCallback+0xfc>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d004      	beq.n	8000376 <HAL_UART_RxCpltCallback+0xee>
			{
				Error_Handler();
 800036c:	f000 f99c 	bl	80006a8 <Error_Handler>
	}
	else
	{
		Error_Handler();
	}
}
 8000370:	e001      	b.n	8000376 <HAL_UART_RxCpltCallback+0xee>
		Error_Handler();
 8000372:	f000 f999 	bl	80006a8 <Error_Handler>
}
 8000376:	bf00      	nop
 8000378:	3730      	adds	r7, #48	@ 0x30
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200000cc 	.word	0x200000cc
 8000384:	200000a0 	.word	0x200000a0
 8000388:	200000df 	.word	0x200000df
 800038c:	2000002c 	.word	0x2000002c

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000394:	f000 faea 	bl	800096c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000398:	f000 f826 	bl	80003e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039c:	f000 f926 	bl	80005ec <MX_GPIO_Init>
  MX_CAN_Init();
 80003a0:	f000 f868 	bl	8000474 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80003a4:	f000 f8e6 	bl	8000574 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003a8:	f002 fef8 	bl	800319c <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003ac:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <main+0x48>)
 80003ae:	2100      	movs	r1, #0
 80003b0:	480a      	ldr	r0, [pc, #40]	@ (80003dc <main+0x4c>)
 80003b2:	f002 ff3b 	bl	800322c <osThreadNew>
 80003b6:	4603      	mov	r3, r0
 80003b8:	4a09      	ldr	r2, [pc, #36]	@ (80003e0 <main+0x50>)
 80003ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003bc:	f002 ff10 	bl	80031e0 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		/* Toggle LED at PIN13 */
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c4:	4807      	ldr	r0, [pc, #28]	@ (80003e4 <main+0x54>)
 80003c6:	f001 fccf 	bl	8001d68 <HAL_GPIO_TogglePin>
		osDelay(1000);
 80003ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003ce:	f002 ffbf 	bl	8003350 <osDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003d2:	bf00      	nop
 80003d4:	e7f4      	b.n	80003c0 <main+0x30>
 80003d6:	bf00      	nop
 80003d8:	08005c68 	.word	0x08005c68
 80003dc:	0800069d 	.word	0x0800069d
 80003e0:	2000009c 	.word	0x2000009c
 80003e4:	40011000 	.word	0x40011000

080003e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b090      	sub	sp, #64	@ 0x40
 80003ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ee:	f107 0318 	add.w	r3, r7, #24
 80003f2:	2228      	movs	r2, #40	@ 0x28
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f005 fbde 	bl	8005bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800040a:	2301      	movs	r3, #1
 800040c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000412:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000418:	2301      	movs	r3, #1
 800041a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041c:	2302      	movs	r3, #2
 800041e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000420:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000424:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000426:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800042a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042c:	f107 0318 	add.w	r3, r7, #24
 8000430:	4618      	mov	r0, r3
 8000432:	f001 fcb3 	bl	8001d9c <HAL_RCC_OscConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800043c:	f000 f934 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000440:	230f      	movs	r3, #15
 8000442:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000444:	2302      	movs	r3, #2
 8000446:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800044c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000450:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2102      	movs	r1, #2
 800045a:	4618      	mov	r0, r3
 800045c:	f001 ff20 	bl	80022a0 <HAL_RCC_ClockConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000466:	f000 f91f 	bl	80006a8 <Error_Handler>
  }
}
 800046a:	bf00      	nop
 800046c:	3740      	adds	r7, #64	@ 0x40
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000478:	4b3a      	ldr	r3, [pc, #232]	@ (8000564 <MX_CAN_Init+0xf0>)
 800047a:	4a3b      	ldr	r2, [pc, #236]	@ (8000568 <MX_CAN_Init+0xf4>)
 800047c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800047e:	4b39      	ldr	r3, [pc, #228]	@ (8000564 <MX_CAN_Init+0xf0>)
 8000480:	2209      	movs	r2, #9
 8000482:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000484:	4b37      	ldr	r3, [pc, #220]	@ (8000564 <MX_CAN_Init+0xf0>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800048a:	4b36      	ldr	r3, [pc, #216]	@ (8000564 <MX_CAN_Init+0xf0>)
 800048c:	2200      	movs	r2, #0
 800048e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000490:	4b34      	ldr	r3, [pc, #208]	@ (8000564 <MX_CAN_Init+0xf0>)
 8000492:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000496:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000498:	4b32      	ldr	r3, [pc, #200]	@ (8000564 <MX_CAN_Init+0xf0>)
 800049a:	2200      	movs	r2, #0
 800049c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = ENABLE;
 800049e:	4b31      	ldr	r3, [pc, #196]	@ (8000564 <MX_CAN_Init+0xf0>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80004a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000564 <MX_CAN_Init+0xf0>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 80004aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000564 <MX_CAN_Init+0xf0>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000564 <MX_CAN_Init+0xf0>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = ENABLE;
 80004b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000564 <MX_CAN_Init+0xf0>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80004bc:	4b29      	ldr	r3, [pc, #164]	@ (8000564 <MX_CAN_Init+0xf0>)
 80004be:	2201      	movs	r2, #1
 80004c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004c2:	4828      	ldr	r0, [pc, #160]	@ (8000564 <MX_CAN_Init+0xf0>)
 80004c4:	f000 fab4 	bl	8000a30 <HAL_CAN_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80004ce:	f000 f8eb 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	sFilterConfig.FilterIdHigh 			= 0;
 80004d2:	4b26      	ldr	r3, [pc, #152]	@ (800056c <MX_CAN_Init+0xf8>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow 			= 0;
 80004d8:	4b24      	ldr	r3, [pc, #144]	@ (800056c <MX_CAN_Init+0xf8>)
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh 		= 0;
 80004de:	4b23      	ldr	r3, [pc, #140]	@ (800056c <MX_CAN_Init+0xf8>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow		= 0;
 80004e4:	4b21      	ldr	r3, [pc, #132]	@ (800056c <MX_CAN_Init+0xf8>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment 	= CAN_FILTER_FIFO0;
 80004ea:	4b20      	ldr	r3, [pc, #128]	@ (800056c <MX_CAN_Init+0xf8>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterBank 			= 0;
 80004f0:	4b1e      	ldr	r3, [pc, #120]	@ (800056c <MX_CAN_Init+0xf8>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode 			= CAN_FILTERMODE_IDMASK;
 80004f6:	4b1d      	ldr	r3, [pc, #116]	@ (800056c <MX_CAN_Init+0xf8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale 			= CAN_FILTERSCALE_16BIT;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	@ (800056c <MX_CAN_Init+0xf8>)
 80004fe:	2200      	movs	r2, #0
 8000500:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation 		= CAN_FILTER_ENABLE;
 8000502:	4b1a      	ldr	r3, [pc, #104]	@ (800056c <MX_CAN_Init+0xf8>)
 8000504:	2201      	movs	r2, #1
 8000506:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank 	= 0;
 8000508:	4b18      	ldr	r3, [pc, #96]	@ (800056c <MX_CAN_Init+0xf8>)
 800050a:	2200      	movs	r2, #0
 800050c:	625a      	str	r2, [r3, #36]	@ 0x24

	retVal = HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800050e:	4917      	ldr	r1, [pc, #92]	@ (800056c <MX_CAN_Init+0xf8>)
 8000510:	4814      	ldr	r0, [pc, #80]	@ (8000564 <MX_CAN_Init+0xf0>)
 8000512:	f000 fb88 	bl	8000c26 <HAL_CAN_ConfigFilter>
 8000516:	4603      	mov	r3, r0
 8000518:	461a      	mov	r2, r3
 800051a:	4b15      	ldr	r3, [pc, #84]	@ (8000570 <MX_CAN_Init+0xfc>)
 800051c:	701a      	strb	r2, [r3, #0]
	if (retVal != HAL_OK)
 800051e:	4b14      	ldr	r3, [pc, #80]	@ (8000570 <MX_CAN_Init+0xfc>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_CAN_Init+0xb6>
	{
		Error_Handler();
 8000526:	f000 f8bf 	bl	80006a8 <Error_Handler>
	}

	retVal = HAL_CAN_Start(&hcan);
 800052a:	480e      	ldr	r0, [pc, #56]	@ (8000564 <MX_CAN_Init+0xf0>)
 800052c:	f000 fc44 	bl	8000db8 <HAL_CAN_Start>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	4b0e      	ldr	r3, [pc, #56]	@ (8000570 <MX_CAN_Init+0xfc>)
 8000536:	701a      	strb	r2, [r3, #0]
	if (retVal != HAL_OK)
 8000538:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <MX_CAN_Init+0xfc>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_CAN_Init+0xd0>
	{
		Error_Handler();
 8000540:	f000 f8b2 	bl	80006a8 <Error_Handler>
	}

	retVal = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_FULL);
 8000544:	2104      	movs	r1, #4
 8000546:	4807      	ldr	r0, [pc, #28]	@ (8000564 <MX_CAN_Init+0xf0>)
 8000548:	f000 fe6a 	bl	8001220 <HAL_CAN_ActivateNotification>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <MX_CAN_Init+0xfc>)
 8000552:	701a      	strb	r2, [r3, #0]
	if (retVal != HAL_OK)
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <MX_CAN_Init+0xfc>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_CAN_Init+0xec>
	{
		Error_Handler();
 800055c:	f000 f8a4 	bl	80006a8 <Error_Handler>
	}
  /* USER CODE END CAN_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	2000002c 	.word	0x2000002c
 8000568:	40006400 	.word	0x40006400
 800056c:	200000a4 	.word	0x200000a4
 8000570:	200000a0 	.word	0x200000a0

08000574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000578:	4b18      	ldr	r3, [pc, #96]	@ (80005dc <MX_USART1_UART_Init+0x68>)
 800057a:	4a19      	ldr	r2, [pc, #100]	@ (80005e0 <MX_USART1_UART_Init+0x6c>)
 800057c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800057e:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <MX_USART1_UART_Init+0x68>)
 8000580:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000586:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <MX_USART1_UART_Init+0x68>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800058c:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <MX_USART1_UART_Init+0x68>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000592:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <MX_USART1_UART_Init+0x68>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000598:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <MX_USART1_UART_Init+0x68>)
 800059a:	220c      	movs	r2, #12
 800059c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <MX_USART1_UART_Init+0x68>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a4:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <MX_USART1_UART_Init+0x68>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005aa:	480c      	ldr	r0, [pc, #48]	@ (80005dc <MX_USART1_UART_Init+0x68>)
 80005ac:	f002 f806 	bl	80025bc <HAL_UART_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005b6:	f000 f877 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  retVal = HAL_UART_Receive_IT(&huart1, UART_RxData, 19);
 80005ba:	2213      	movs	r2, #19
 80005bc:	4909      	ldr	r1, [pc, #36]	@ (80005e4 <MX_USART1_UART_Init+0x70>)
 80005be:	4807      	ldr	r0, [pc, #28]	@ (80005dc <MX_USART1_UART_Init+0x68>)
 80005c0:	f002 f881 	bl	80026c6 <HAL_UART_Receive_IT>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <MX_USART1_UART_Init+0x74>)
 80005ca:	701a      	strb	r2, [r3, #0]
  if (retVal != HAL_OK)
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <MX_USART1_UART_Init+0x74>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 80005d4:	f000 f868 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE END USART1_Init 2 */

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000054 	.word	0x20000054
 80005e0:	40013800 	.word	0x40013800
 80005e4:	200000cc 	.word	0x200000cc
 80005e8:	200000a0 	.word	0x200000a0

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000600:	4b24      	ldr	r3, [pc, #144]	@ (8000694 <MX_GPIO_Init+0xa8>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a23      	ldr	r2, [pc, #140]	@ (8000694 <MX_GPIO_Init+0xa8>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <MX_GPIO_Init+0xa8>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0310 	and.w	r3, r3, #16
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000618:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <MX_GPIO_Init+0xa8>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a1d      	ldr	r2, [pc, #116]	@ (8000694 <MX_GPIO_Init+0xa8>)
 800061e:	f043 0320 	orr.w	r3, r3, #32
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b1b      	ldr	r3, [pc, #108]	@ (8000694 <MX_GPIO_Init+0xa8>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0320 	and.w	r3, r3, #32
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	4b18      	ldr	r3, [pc, #96]	@ (8000694 <MX_GPIO_Init+0xa8>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a17      	ldr	r2, [pc, #92]	@ (8000694 <MX_GPIO_Init+0xa8>)
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <MX_GPIO_Init+0xa8>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0304 	and.w	r3, r3, #4
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <MX_GPIO_Init+0xa8>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a11      	ldr	r2, [pc, #68]	@ (8000694 <MX_GPIO_Init+0xa8>)
 800064e:	f043 0308 	orr.w	r3, r3, #8
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_GPIO_Init+0xa8>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0308 	and.w	r3, r3, #8
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000666:	480c      	ldr	r0, [pc, #48]	@ (8000698 <MX_GPIO_Init+0xac>)
 8000668:	f001 fb66 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800066c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2302      	movs	r3, #2
 800067c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4619      	mov	r1, r3
 8000684:	4804      	ldr	r0, [pc, #16]	@ (8000698 <MX_GPIO_Init+0xac>)
 8000686:	f001 f9d3 	bl	8001a30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800068a:	bf00      	nop
 800068c:	3720      	adds	r7, #32
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000
 8000698:	40011000 	.word	0x40011000

0800069c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <StartDefaultTask+0x8>

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <Error_Handler+0x8>

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ba:	4b18      	ldr	r3, [pc, #96]	@ (800071c <HAL_MspInit+0x68>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a17      	ldr	r2, [pc, #92]	@ (800071c <HAL_MspInit+0x68>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b15      	ldr	r3, [pc, #84]	@ (800071c <HAL_MspInit+0x68>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b12      	ldr	r3, [pc, #72]	@ (800071c <HAL_MspInit+0x68>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a11      	ldr	r2, [pc, #68]	@ (800071c <HAL_MspInit+0x68>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <HAL_MspInit+0x68>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	210f      	movs	r1, #15
 80006ee:	f06f 0001 	mvn.w	r0, #1
 80006f2:	f001 f8b4 	bl	800185e <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <HAL_MspInit+0x6c>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <HAL_MspInit+0x6c>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000
 8000720:	40010000 	.word	0x40010000

08000724 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a29      	ldr	r2, [pc, #164]	@ (80007e4 <HAL_CAN_MspInit+0xc0>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d14b      	bne.n	80007dc <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000744:	4b28      	ldr	r3, [pc, #160]	@ (80007e8 <HAL_CAN_MspInit+0xc4>)
 8000746:	69db      	ldr	r3, [r3, #28]
 8000748:	4a27      	ldr	r2, [pc, #156]	@ (80007e8 <HAL_CAN_MspInit+0xc4>)
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800074e:	61d3      	str	r3, [r2, #28]
 8000750:	4b25      	ldr	r3, [pc, #148]	@ (80007e8 <HAL_CAN_MspInit+0xc4>)
 8000752:	69db      	ldr	r3, [r3, #28]
 8000754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075c:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <HAL_CAN_MspInit+0xc4>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a21      	ldr	r2, [pc, #132]	@ (80007e8 <HAL_CAN_MspInit+0xc4>)
 8000762:	f043 0308 	orr.w	r3, r3, #8
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <HAL_CAN_MspInit+0xc4>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0308 	and.w	r3, r3, #8
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000774:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	4818      	ldr	r0, [pc, #96]	@ (80007ec <HAL_CAN_MspInit+0xc8>)
 800078a:	f001 f951 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800078e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4812      	ldr	r0, [pc, #72]	@ (80007ec <HAL_CAN_MspInit+0xc8>)
 80007a4:	f001 f944 	bl	8001a30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <HAL_CAN_MspInit+0xcc>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80007ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b0:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80007b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80007be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80007c6:	4a0a      	ldr	r2, [pc, #40]	@ (80007f0 <HAL_CAN_MspInit+0xcc>)
 80007c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ca:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2105      	movs	r1, #5
 80007d0:	2014      	movs	r0, #20
 80007d2:	f001 f844 	bl	800185e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80007d6:	2014      	movs	r0, #20
 80007d8:	f001 f85d 	bl	8001896 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	@ 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40006400 	.word	0x40006400
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010c00 	.word	0x40010c00
 80007f0:	40010000 	.word	0x40010000

080007f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a20      	ldr	r2, [pc, #128]	@ (8000890 <HAL_UART_MspInit+0x9c>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d139      	bne.n	8000888 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <HAL_UART_MspInit+0xa0>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a1e      	ldr	r2, [pc, #120]	@ (8000894 <HAL_UART_MspInit+0xa0>)
 800081a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <HAL_UART_MspInit+0xa0>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <HAL_UART_MspInit+0xa0>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a18      	ldr	r2, [pc, #96]	@ (8000894 <HAL_UART_MspInit+0xa0>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <HAL_UART_MspInit+0xa0>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000844:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000848:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0310 	add.w	r3, r7, #16
 8000856:	4619      	mov	r1, r3
 8000858:	480f      	ldr	r0, [pc, #60]	@ (8000898 <HAL_UART_MspInit+0xa4>)
 800085a:	f001 f8e9 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800085e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000862:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4619      	mov	r1, r3
 8000872:	4809      	ldr	r0, [pc, #36]	@ (8000898 <HAL_UART_MspInit+0xa4>)
 8000874:	f001 f8dc 	bl	8001a30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2105      	movs	r1, #5
 800087c:	2025      	movs	r0, #37	@ 0x25
 800087e:	f000 ffee 	bl	800185e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000882:	2025      	movs	r0, #37	@ 0x25
 8000884:	f001 f807 	bl	8001896 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40013800 	.word	0x40013800
 8000894:	40021000 	.word	0x40021000
 8000898:	40010800 	.word	0x40010800

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <NMI_Handler+0x4>

080008a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <MemManage_Handler+0x4>

080008b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d4:	f000 f890 	bl	80009f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008d8:	f004 f958 	bl	8004b8c <xTaskGetSchedulerState>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d001      	beq.n	80008e6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008e2:	f004 fef9 	bl	80056d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008f0:	4802      	ldr	r0, [pc, #8]	@ (80008fc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008f2:	f000 fcba 	bl	800126a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000002c 	.word	0x2000002c

08000900 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000904:	4802      	ldr	r0, [pc, #8]	@ (8000910 <USART1_IRQHandler+0x10>)
 8000906:	f001 ff03 	bl	8002710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000054 	.word	0x20000054

08000914 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000920:	f7ff fff8 	bl	8000914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480b      	ldr	r0, [pc, #44]	@ (8000954 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000926:	490c      	ldr	r1, [pc, #48]	@ (8000958 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000928:	4a0c      	ldr	r2, [pc, #48]	@ (800095c <LoopFillZerobss+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a09      	ldr	r2, [pc, #36]	@ (8000960 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800093c:	4c09      	ldr	r4, [pc, #36]	@ (8000964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094a:	f005 f93d 	bl	8005bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094e:	f7ff fd1f 	bl	8000390 <main>
  bx lr
 8000952:	4770      	bx	lr
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800095c:	08005cc0 	.word	0x08005cc0
  ldr r2, =_sbss
 8000960:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000964:	20001a34 	.word	0x20001a34

08000968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC1_2_IRQHandler>
	...

0800096c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000970:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <HAL_Init+0x28>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a07      	ldr	r2, [pc, #28]	@ (8000994 <HAL_Init+0x28>)
 8000976:	f043 0310 	orr.w	r3, r3, #16
 800097a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097c:	2003      	movs	r0, #3
 800097e:	f000 ff63 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000982:	200f      	movs	r0, #15
 8000984:	f000 f808 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000988:	f7ff fe94 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40022000 	.word	0x40022000

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <HAL_InitTick+0x54>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <HAL_InitTick+0x58>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 ff7b 	bl	80018b2 <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00e      	b.n	80009e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d80a      	bhi.n	80009e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009d4:	f000 ff43 	bl	800185e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d8:	4a06      	ldr	r2, [pc, #24]	@ (80009f4 <HAL_InitTick+0x5c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000004 	.word	0x20000004

080009f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <HAL_IncTick+0x1c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <HAL_IncTick+0x20>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a03      	ldr	r2, [pc, #12]	@ (8000a18 <HAL_IncTick+0x20>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	20000008 	.word	0x20000008
 8000a18:	200000e0 	.word	0x200000e0

08000a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b02      	ldr	r3, [pc, #8]	@ (8000a2c <HAL_GetTick+0x10>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	200000e0 	.word	0x200000e0

08000a30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d101      	bne.n	8000a42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e0ed      	b.n	8000c1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d102      	bne.n	8000a54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff fe68 	bl	8000724 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f042 0201 	orr.w	r2, r2, #1
 8000a62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a64:	f7ff ffda 	bl	8000a1c <HAL_GetTick>
 8000a68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a6a:	e012      	b.n	8000a92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a6c:	f7ff ffd6 	bl	8000a1c <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	2b0a      	cmp	r3, #10
 8000a78:	d90b      	bls.n	8000a92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2205      	movs	r2, #5
 8000a8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e0c5      	b.n	8000c1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0e5      	beq.n	8000a6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f022 0202 	bic.w	r2, r2, #2
 8000aae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ab0:	f7ff ffb4 	bl	8000a1c <HAL_GetTick>
 8000ab4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ab6:	e012      	b.n	8000ade <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ab8:	f7ff ffb0 	bl	8000a1c <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	2b0a      	cmp	r3, #10
 8000ac4:	d90b      	bls.n	8000ade <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2205      	movs	r2, #5
 8000ad6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e09f      	b.n	8000c1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1e5      	bne.n	8000ab8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7e1b      	ldrb	r3, [r3, #24]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d108      	bne.n	8000b06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	e007      	b.n	8000b16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	7e5b      	ldrb	r3, [r3, #25]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d108      	bne.n	8000b30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	e007      	b.n	8000b40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7e9b      	ldrb	r3, [r3, #26]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d108      	bne.n	8000b5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f042 0220 	orr.w	r2, r2, #32
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	e007      	b.n	8000b6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f022 0220 	bic.w	r2, r2, #32
 8000b68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	7edb      	ldrb	r3, [r3, #27]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d108      	bne.n	8000b84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 0210 	bic.w	r2, r2, #16
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	e007      	b.n	8000b94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f042 0210 	orr.w	r2, r2, #16
 8000b92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	7f1b      	ldrb	r3, [r3, #28]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d108      	bne.n	8000bae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f042 0208 	orr.w	r2, r2, #8
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e007      	b.n	8000bbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 0208 	bic.w	r2, r2, #8
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7f5b      	ldrb	r3, [r3, #29]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d108      	bne.n	8000bd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f042 0204 	orr.w	r2, r2, #4
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	e007      	b.n	8000be8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f022 0204 	bic.w	r2, r2, #4
 8000be6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	ea42 0103 	orr.w	r1, r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	1e5a      	subs	r2, r3, #1
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2201      	movs	r2, #1
 8000c18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b087      	sub	sp, #28
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c3c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c3e:	7cfb      	ldrb	r3, [r7, #19]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d003      	beq.n	8000c4c <HAL_CAN_ConfigFilter+0x26>
 8000c44:	7cfb      	ldrb	r3, [r7, #19]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	f040 80aa 	bne.w	8000da0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c52:	f043 0201 	orr.w	r2, r3, #1
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	f003 031f 	and.w	r3, r3, #31
 8000c64:	2201      	movs	r2, #1
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d123      	bne.n	8000cce <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	401a      	ands	r2, r3
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ca8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3248      	adds	r2, #72	@ 0x48
 8000cae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cc2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cc4:	6979      	ldr	r1, [r7, #20]
 8000cc6:	3348      	adds	r3, #72	@ 0x48
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	440b      	add	r3, r1
 8000ccc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d122      	bne.n	8000d1c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cf6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3248      	adds	r2, #72	@ 0x48
 8000cfc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d10:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d12:	6979      	ldr	r1, [r7, #20]
 8000d14:	3348      	adds	r3, #72	@ 0x48
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	440b      	add	r3, r1
 8000d1a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d109      	bne.n	8000d38 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000d36:	e007      	b.n	8000d48 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	431a      	orrs	r2, r3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d109      	bne.n	8000d64 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000d62:	e007      	b.n	8000d74 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d107      	bne.n	8000d8c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d92:	f023 0201 	bic.w	r2, r3, #1
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e006      	b.n	8000dae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
  }
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	371c      	adds	r7, #28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d12e      	bne.n	8000e2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2202      	movs	r2, #2
 8000dd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 0201 	bic.w	r2, r2, #1
 8000de2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000de4:	f7ff fe1a 	bl	8000a1c <HAL_GetTick>
 8000de8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dea:	e012      	b.n	8000e12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dec:	f7ff fe16 	bl	8000a1c <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b0a      	cmp	r3, #10
 8000df8:	d90b      	bls.n	8000e12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dfe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2205      	movs	r2, #5
 8000e0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e012      	b.n	8000e38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1e5      	bne.n	8000dec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e006      	b.n	8000e38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e2e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
  }
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e54:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e5e:	7ffb      	ldrb	r3, [r7, #31]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d003      	beq.n	8000e6c <HAL_CAN_AddTxMessage+0x2c>
 8000e64:	7ffb      	ldrb	r3, [r7, #31]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	f040 80ad 	bne.w	8000fc6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10a      	bne.n	8000e8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d105      	bne.n	8000e8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 8095 	beq.w	8000fb6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	0e1b      	lsrs	r3, r3, #24
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e96:	2201      	movs	r2, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10d      	bne.n	8000ec4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000eb2:	68f9      	ldr	r1, [r7, #12]
 8000eb4:	6809      	ldr	r1, [r1, #0]
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	3318      	adds	r3, #24
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	440b      	add	r3, r1
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e00f      	b.n	8000ee4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ece:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ed4:	68f9      	ldr	r1, [r7, #12]
 8000ed6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000ed8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3318      	adds	r3, #24
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	440b      	add	r3, r1
 8000ee2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6819      	ldr	r1, [r3, #0]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	691a      	ldr	r2, [r3, #16]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	3318      	adds	r3, #24
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	440b      	add	r3, r1
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	7d1b      	ldrb	r3, [r3, #20]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d111      	bne.n	8000f24 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3318      	adds	r3, #24
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	6811      	ldr	r1, [r2, #0]
 8000f14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3318      	adds	r3, #24
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	440b      	add	r3, r1
 8000f20:	3304      	adds	r3, #4
 8000f22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3307      	adds	r3, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	061a      	lsls	r2, r3, #24
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3306      	adds	r3, #6
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	041b      	lsls	r3, r3, #16
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3305      	adds	r3, #5
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	3204      	adds	r2, #4
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	4610      	mov	r0, r2
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	6811      	ldr	r1, [r2, #0]
 8000f4c:	ea43 0200 	orr.w	r2, r3, r0
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	011b      	lsls	r3, r3, #4
 8000f54:	440b      	add	r3, r1
 8000f56:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000f5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3303      	adds	r3, #3
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	061a      	lsls	r2, r3, #24
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3302      	adds	r3, #2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	041b      	lsls	r3, r3, #16
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3301      	adds	r3, #1
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	4313      	orrs	r3, r2
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	7812      	ldrb	r2, [r2, #0]
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	6811      	ldr	r1, [r2, #0]
 8000f82:	ea43 0200 	orr.w	r2, r3, r0
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000f90:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3318      	adds	r3, #24
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	4413      	add	r3, r2
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	6811      	ldr	r1, [r2, #0]
 8000fa4:	f043 0201 	orr.w	r2, r3, #1
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3318      	adds	r3, #24
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	440b      	add	r3, r1
 8000fb0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e00e      	b.n	8000fd4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e006      	b.n	8000fd4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
  }
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3724      	adds	r7, #36	@ 0x24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b087      	sub	sp, #28
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d003      	beq.n	8001002 <HAL_CAN_GetRxMessage+0x24>
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	f040 8103 	bne.w	8001208 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d10e      	bne.n	8001026 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d116      	bne.n	8001044 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e0f7      	b.n	8001216 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b00      	cmp	r3, #0
 8001032:	d107      	bne.n	8001044 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001038:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e0e8      	b.n	8001216 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	331b      	adds	r3, #27
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	4413      	add	r3, r2
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0204 	and.w	r2, r3, #4
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10c      	bne.n	800107c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	331b      	adds	r3, #27
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	4413      	add	r3, r2
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	0d5b      	lsrs	r3, r3, #21
 8001072:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e00b      	b.n	8001094 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	331b      	adds	r3, #27
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	4413      	add	r3, r2
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	331b      	adds	r3, #27
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	4413      	add	r3, r2
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0202 	and.w	r2, r3, #2
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	331b      	adds	r3, #27
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4413      	add	r3, r2
 80010b6:	3304      	adds	r3, #4
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2208      	movs	r2, #8
 80010c6:	611a      	str	r2, [r3, #16]
 80010c8:	e00b      	b.n	80010e2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	331b      	adds	r3, #27
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	4413      	add	r3, r2
 80010d6:	3304      	adds	r3, #4
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 020f 	and.w	r2, r3, #15
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	331b      	adds	r3, #27
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	4413      	add	r3, r2
 80010ee:	3304      	adds	r3, #4
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	331b      	adds	r3, #27
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4413      	add	r3, r2
 8001106:	3304      	adds	r3, #4
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	0c1b      	lsrs	r3, r3, #16
 800110c:	b29a      	uxth	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	4413      	add	r3, r2
 800111c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	4413      	add	r3, r2
 8001132:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	0a1a      	lsrs	r2, r3, #8
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	4413      	add	r3, r2
 800114c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	0c1a      	lsrs	r2, r3, #16
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	3302      	adds	r3, #2
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	4413      	add	r3, r2
 8001166:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	0e1a      	lsrs	r2, r3, #24
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	3303      	adds	r3, #3
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	4413      	add	r3, r2
 8001180:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	3304      	adds	r3, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	4413      	add	r3, r2
 8001198:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	0a1a      	lsrs	r2, r3, #8
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	3305      	adds	r3, #5
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	4413      	add	r3, r2
 80011b2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	0c1a      	lsrs	r2, r3, #16
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3306      	adds	r3, #6
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	4413      	add	r3, r2
 80011cc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	0e1a      	lsrs	r2, r3, #24
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	3307      	adds	r3, #7
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d108      	bne.n	80011f4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f042 0220 	orr.w	r2, r2, #32
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	e007      	b.n	8001204 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	691a      	ldr	r2, [r3, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0220 	orr.w	r2, r2, #32
 8001202:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	e006      	b.n	8001216 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
  }
}
 8001216:	4618      	mov	r0, r3
 8001218:	371c      	adds	r7, #28
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001230:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d002      	beq.n	800123e <HAL_CAN_ActivateNotification+0x1e>
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d109      	bne.n	8001252 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6959      	ldr	r1, [r3, #20]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e006      	b.n	8001260 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001256:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
  }
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b08a      	sub	sp, #40	@ 0x28
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d07c      	beq.n	80013aa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d023      	beq.n	8001302 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2201      	movs	r2, #1
 80012c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 f983 	bl	80015d8 <HAL_CAN_TxMailbox0CompleteCallback>
 80012d2:	e016      	b.n	8001302 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d004      	beq.n	80012e8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80012de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80012e6:	e00c      	b.n	8001302 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012fa:	e002      	b.n	8001302 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f986 	bl	800160e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d024      	beq.n	8001356 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001314:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f962 	bl	80015ea <HAL_CAN_TxMailbox1CompleteCallback>
 8001326:	e016      	b.n	8001356 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800132e:	2b00      	cmp	r3, #0
 8001330:	d004      	beq.n	800133c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
 800133a:	e00c      	b.n	8001356 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001342:	2b00      	cmp	r3, #0
 8001344:	d004      	beq.n	8001350 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
 800134e:	e002      	b.n	8001356 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 f965 	bl	8001620 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d024      	beq.n	80013aa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001368:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f941 	bl	80015fc <HAL_CAN_TxMailbox2CompleteCallback>
 800137a:	e016      	b.n	80013aa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d004      	beq.n	8001390 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
 800138e:	e00c      	b.n	80013aa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d004      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a2:	e002      	b.n	80013aa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f944 	bl	8001632 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00c      	beq.n	80013ce <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d007      	beq.n	80013ce <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2210      	movs	r2, #16
 80013cc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00b      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2208      	movs	r2, #8
 80013e8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7fe feb0 	bl	8000150 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d009      	beq.n	800140e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f91b 	bl	8001644 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00c      	beq.n	8001432 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2210      	movs	r2, #16
 8001430:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	f003 0320 	and.w	r3, r3, #32
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00b      	beq.n	8001454 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2208      	movs	r2, #8
 800144c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f90a 	bl	8001668 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	2b00      	cmp	r3, #0
 800145c:	d009      	beq.n	8001472 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f8f2 	bl	8001656 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00b      	beq.n	8001494 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2210      	movs	r2, #16
 800148c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f8f3 	bl	800167a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d006      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2208      	movs	r2, #8
 80014ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f8eb 	bl	800168c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d07b      	beq.n	80015b8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d072      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80014de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d008      	beq.n	8001502 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001524:	2b00      	cmp	r3, #0
 8001526:	d043      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800152e:	2b00      	cmp	r3, #0
 8001530:	d03e      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001538:	2b60      	cmp	r3, #96	@ 0x60
 800153a:	d02b      	beq.n	8001594 <HAL_CAN_IRQHandler+0x32a>
 800153c:	2b60      	cmp	r3, #96	@ 0x60
 800153e:	d82e      	bhi.n	800159e <HAL_CAN_IRQHandler+0x334>
 8001540:	2b50      	cmp	r3, #80	@ 0x50
 8001542:	d022      	beq.n	800158a <HAL_CAN_IRQHandler+0x320>
 8001544:	2b50      	cmp	r3, #80	@ 0x50
 8001546:	d82a      	bhi.n	800159e <HAL_CAN_IRQHandler+0x334>
 8001548:	2b40      	cmp	r3, #64	@ 0x40
 800154a:	d019      	beq.n	8001580 <HAL_CAN_IRQHandler+0x316>
 800154c:	2b40      	cmp	r3, #64	@ 0x40
 800154e:	d826      	bhi.n	800159e <HAL_CAN_IRQHandler+0x334>
 8001550:	2b30      	cmp	r3, #48	@ 0x30
 8001552:	d010      	beq.n	8001576 <HAL_CAN_IRQHandler+0x30c>
 8001554:	2b30      	cmp	r3, #48	@ 0x30
 8001556:	d822      	bhi.n	800159e <HAL_CAN_IRQHandler+0x334>
 8001558:	2b10      	cmp	r3, #16
 800155a:	d002      	beq.n	8001562 <HAL_CAN_IRQHandler+0x2f8>
 800155c:	2b20      	cmp	r3, #32
 800155e:	d005      	beq.n	800156c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001560:	e01d      	b.n	800159e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800156a:	e019      	b.n	80015a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	f043 0310 	orr.w	r3, r3, #16
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001574:	e014      	b.n	80015a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	f043 0320 	orr.w	r3, r3, #32
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800157e:	e00f      	b.n	80015a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001588:	e00a      	b.n	80015a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001592:	e005      	b.n	80015a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800159c:	e000      	b.n	80015a0 <HAL_CAN_IRQHandler+0x336>
            break;
 800159e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699a      	ldr	r2, [r3, #24]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80015ae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2204      	movs	r2, #4
 80015b6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d008      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f867 	bl	800169e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80015d0:	bf00      	nop
 80015d2:	3728      	adds	r7, #40	@ 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	@ (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	db0b      	blt.n	800173e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 021f 	and.w	r2, r3, #31
 800172c:	4906      	ldr	r1, [pc, #24]	@ (8001748 <__NVIC_EnableIRQ+0x34>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	2001      	movs	r0, #1
 8001736:	fa00 f202 	lsl.w	r2, r0, r2
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	@ (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	@ (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	@ 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001814:	d301      	bcc.n	800181a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e00f      	b.n	800183a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <SysTick_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	210f      	movs	r1, #15
 8001824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001828:	f7ff ff90 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <SysTick_Config+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <SysTick_Config+0x40>)
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff2d 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff42 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff90 	bl	80017a0 <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5f 	bl	800174c <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff35 	bl	8001714 <__NVIC_EnableIRQ>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffa2 	bl	8001804 <SysTick_Config>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b085      	sub	sp, #20
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d008      	beq.n	80018f4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2204      	movs	r2, #4
 80018e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e020      	b.n	8001936 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 020e 	bic.w	r2, r2, #14
 8001902:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f202 	lsl.w	r2, r1, r2
 8001922:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001934:	7bfb      	ldrb	r3, [r7, #15]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d005      	beq.n	8001964 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2204      	movs	r2, #4
 800195c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
 8001962:	e051      	b.n	8001a08 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 020e 	bic.w	r2, r2, #14
 8001972:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0201 	bic.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a22      	ldr	r2, [pc, #136]	@ (8001a14 <HAL_DMA_Abort_IT+0xd4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d029      	beq.n	80019e2 <HAL_DMA_Abort_IT+0xa2>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a21      	ldr	r2, [pc, #132]	@ (8001a18 <HAL_DMA_Abort_IT+0xd8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d022      	beq.n	80019de <HAL_DMA_Abort_IT+0x9e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1f      	ldr	r2, [pc, #124]	@ (8001a1c <HAL_DMA_Abort_IT+0xdc>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d01a      	beq.n	80019d8 <HAL_DMA_Abort_IT+0x98>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a20 <HAL_DMA_Abort_IT+0xe0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d012      	beq.n	80019d2 <HAL_DMA_Abort_IT+0x92>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a24 <HAL_DMA_Abort_IT+0xe4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00a      	beq.n	80019cc <HAL_DMA_Abort_IT+0x8c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001a28 <HAL_DMA_Abort_IT+0xe8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d102      	bne.n	80019c6 <HAL_DMA_Abort_IT+0x86>
 80019c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80019c4:	e00e      	b.n	80019e4 <HAL_DMA_Abort_IT+0xa4>
 80019c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019ca:	e00b      	b.n	80019e4 <HAL_DMA_Abort_IT+0xa4>
 80019cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019d0:	e008      	b.n	80019e4 <HAL_DMA_Abort_IT+0xa4>
 80019d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019d6:	e005      	b.n	80019e4 <HAL_DMA_Abort_IT+0xa4>
 80019d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019dc:	e002      	b.n	80019e4 <HAL_DMA_Abort_IT+0xa4>
 80019de:	2310      	movs	r3, #16
 80019e0:	e000      	b.n	80019e4 <HAL_DMA_Abort_IT+0xa4>
 80019e2:	2301      	movs	r3, #1
 80019e4:	4a11      	ldr	r2, [pc, #68]	@ (8001a2c <HAL_DMA_Abort_IT+0xec>)
 80019e6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	4798      	blx	r3
    } 
  }
  return status;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40020008 	.word	0x40020008
 8001a18:	4002001c 	.word	0x4002001c
 8001a1c:	40020030 	.word	0x40020030
 8001a20:	40020044 	.word	0x40020044
 8001a24:	40020058 	.word	0x40020058
 8001a28:	4002006c 	.word	0x4002006c
 8001a2c:	40020000 	.word	0x40020000

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b08b      	sub	sp, #44	@ 0x2c
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a42:	e169      	b.n	8001d18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a44:	2201      	movs	r2, #1
 8001a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f040 8158 	bne.w	8001d12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4a9a      	ldr	r2, [pc, #616]	@ (8001cd0 <HAL_GPIO_Init+0x2a0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d05e      	beq.n	8001b2a <HAL_GPIO_Init+0xfa>
 8001a6c:	4a98      	ldr	r2, [pc, #608]	@ (8001cd0 <HAL_GPIO_Init+0x2a0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d875      	bhi.n	8001b5e <HAL_GPIO_Init+0x12e>
 8001a72:	4a98      	ldr	r2, [pc, #608]	@ (8001cd4 <HAL_GPIO_Init+0x2a4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d058      	beq.n	8001b2a <HAL_GPIO_Init+0xfa>
 8001a78:	4a96      	ldr	r2, [pc, #600]	@ (8001cd4 <HAL_GPIO_Init+0x2a4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d86f      	bhi.n	8001b5e <HAL_GPIO_Init+0x12e>
 8001a7e:	4a96      	ldr	r2, [pc, #600]	@ (8001cd8 <HAL_GPIO_Init+0x2a8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d052      	beq.n	8001b2a <HAL_GPIO_Init+0xfa>
 8001a84:	4a94      	ldr	r2, [pc, #592]	@ (8001cd8 <HAL_GPIO_Init+0x2a8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d869      	bhi.n	8001b5e <HAL_GPIO_Init+0x12e>
 8001a8a:	4a94      	ldr	r2, [pc, #592]	@ (8001cdc <HAL_GPIO_Init+0x2ac>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d04c      	beq.n	8001b2a <HAL_GPIO_Init+0xfa>
 8001a90:	4a92      	ldr	r2, [pc, #584]	@ (8001cdc <HAL_GPIO_Init+0x2ac>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d863      	bhi.n	8001b5e <HAL_GPIO_Init+0x12e>
 8001a96:	4a92      	ldr	r2, [pc, #584]	@ (8001ce0 <HAL_GPIO_Init+0x2b0>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d046      	beq.n	8001b2a <HAL_GPIO_Init+0xfa>
 8001a9c:	4a90      	ldr	r2, [pc, #576]	@ (8001ce0 <HAL_GPIO_Init+0x2b0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d85d      	bhi.n	8001b5e <HAL_GPIO_Init+0x12e>
 8001aa2:	2b12      	cmp	r3, #18
 8001aa4:	d82a      	bhi.n	8001afc <HAL_GPIO_Init+0xcc>
 8001aa6:	2b12      	cmp	r3, #18
 8001aa8:	d859      	bhi.n	8001b5e <HAL_GPIO_Init+0x12e>
 8001aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab0 <HAL_GPIO_Init+0x80>)
 8001aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab0:	08001b2b 	.word	0x08001b2b
 8001ab4:	08001b05 	.word	0x08001b05
 8001ab8:	08001b17 	.word	0x08001b17
 8001abc:	08001b59 	.word	0x08001b59
 8001ac0:	08001b5f 	.word	0x08001b5f
 8001ac4:	08001b5f 	.word	0x08001b5f
 8001ac8:	08001b5f 	.word	0x08001b5f
 8001acc:	08001b5f 	.word	0x08001b5f
 8001ad0:	08001b5f 	.word	0x08001b5f
 8001ad4:	08001b5f 	.word	0x08001b5f
 8001ad8:	08001b5f 	.word	0x08001b5f
 8001adc:	08001b5f 	.word	0x08001b5f
 8001ae0:	08001b5f 	.word	0x08001b5f
 8001ae4:	08001b5f 	.word	0x08001b5f
 8001ae8:	08001b5f 	.word	0x08001b5f
 8001aec:	08001b5f 	.word	0x08001b5f
 8001af0:	08001b5f 	.word	0x08001b5f
 8001af4:	08001b0d 	.word	0x08001b0d
 8001af8:	08001b21 	.word	0x08001b21
 8001afc:	4a79      	ldr	r2, [pc, #484]	@ (8001ce4 <HAL_GPIO_Init+0x2b4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b02:	e02c      	b.n	8001b5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	623b      	str	r3, [r7, #32]
          break;
 8001b0a:	e029      	b.n	8001b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	3304      	adds	r3, #4
 8001b12:	623b      	str	r3, [r7, #32]
          break;
 8001b14:	e024      	b.n	8001b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	3308      	adds	r3, #8
 8001b1c:	623b      	str	r3, [r7, #32]
          break;
 8001b1e:	e01f      	b.n	8001b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	330c      	adds	r3, #12
 8001b26:	623b      	str	r3, [r7, #32]
          break;
 8001b28:	e01a      	b.n	8001b60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d102      	bne.n	8001b38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b32:	2304      	movs	r3, #4
 8001b34:	623b      	str	r3, [r7, #32]
          break;
 8001b36:	e013      	b.n	8001b60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d105      	bne.n	8001b4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b40:	2308      	movs	r3, #8
 8001b42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	611a      	str	r2, [r3, #16]
          break;
 8001b4a:	e009      	b.n	8001b60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	615a      	str	r2, [r3, #20]
          break;
 8001b56:	e003      	b.n	8001b60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
          break;
 8001b5c:	e000      	b.n	8001b60 <HAL_GPIO_Init+0x130>
          break;
 8001b5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2bff      	cmp	r3, #255	@ 0xff
 8001b64:	d801      	bhi.n	8001b6a <HAL_GPIO_Init+0x13a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	e001      	b.n	8001b6e <HAL_GPIO_Init+0x13e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2bff      	cmp	r3, #255	@ 0xff
 8001b74:	d802      	bhi.n	8001b7c <HAL_GPIO_Init+0x14c>
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	e002      	b.n	8001b82 <HAL_GPIO_Init+0x152>
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7e:	3b08      	subs	r3, #8
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	210f      	movs	r1, #15
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	401a      	ands	r2, r3
 8001b94:	6a39      	ldr	r1, [r7, #32]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 80b1 	beq.w	8001d12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6193      	str	r3, [r2, #24]
 8001bbc:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bc8:	4a48      	ldr	r2, [pc, #288]	@ (8001cec <HAL_GPIO_Init+0x2bc>)
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	220f      	movs	r2, #15
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4013      	ands	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a40      	ldr	r2, [pc, #256]	@ (8001cf0 <HAL_GPIO_Init+0x2c0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d013      	beq.n	8001c1c <HAL_GPIO_Init+0x1ec>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a3f      	ldr	r2, [pc, #252]	@ (8001cf4 <HAL_GPIO_Init+0x2c4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00d      	beq.n	8001c18 <HAL_GPIO_Init+0x1e8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a3e      	ldr	r2, [pc, #248]	@ (8001cf8 <HAL_GPIO_Init+0x2c8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d007      	beq.n	8001c14 <HAL_GPIO_Init+0x1e4>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a3d      	ldr	r2, [pc, #244]	@ (8001cfc <HAL_GPIO_Init+0x2cc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_GPIO_Init+0x1e0>
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e006      	b.n	8001c1e <HAL_GPIO_Init+0x1ee>
 8001c10:	2304      	movs	r3, #4
 8001c12:	e004      	b.n	8001c1e <HAL_GPIO_Init+0x1ee>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e002      	b.n	8001c1e <HAL_GPIO_Init+0x1ee>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <HAL_GPIO_Init+0x1ee>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c20:	f002 0203 	and.w	r2, r2, #3
 8001c24:	0092      	lsls	r2, r2, #2
 8001c26:	4093      	lsls	r3, r2
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c2e:	492f      	ldr	r1, [pc, #188]	@ (8001cec <HAL_GPIO_Init+0x2bc>)
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d006      	beq.n	8001c56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c48:	4b2d      	ldr	r3, [pc, #180]	@ (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	492c      	ldr	r1, [pc, #176]	@ (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c56:	4b2a      	ldr	r3, [pc, #168]	@ (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4928      	ldr	r1, [pc, #160]	@ (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d006      	beq.n	8001c7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c70:	4b23      	ldr	r3, [pc, #140]	@ (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	4922      	ldr	r1, [pc, #136]	@ (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60cb      	str	r3, [r1, #12]
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c7e:	4b20      	ldr	r3, [pc, #128]	@ (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	491e      	ldr	r1, [pc, #120]	@ (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d006      	beq.n	8001ca6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c98:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4918      	ldr	r1, [pc, #96]	@ (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ca6:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	4914      	ldr	r1, [pc, #80]	@ (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d021      	beq.n	8001d04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	490e      	ldr	r1, [pc, #56]	@ (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]
 8001ccc:	e021      	b.n	8001d12 <HAL_GPIO_Init+0x2e2>
 8001cce:	bf00      	nop
 8001cd0:	10320000 	.word	0x10320000
 8001cd4:	10310000 	.word	0x10310000
 8001cd8:	10220000 	.word	0x10220000
 8001cdc:	10210000 	.word	0x10210000
 8001ce0:	10120000 	.word	0x10120000
 8001ce4:	10110000 	.word	0x10110000
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40010000 	.word	0x40010000
 8001cf0:	40010800 	.word	0x40010800
 8001cf4:	40010c00 	.word	0x40010c00
 8001cf8:	40011000 	.word	0x40011000
 8001cfc:	40011400 	.word	0x40011400
 8001d00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <HAL_GPIO_Init+0x304>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	4909      	ldr	r1, [pc, #36]	@ (8001d34 <HAL_GPIO_Init+0x304>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	3301      	adds	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f47f ae8e 	bne.w	8001a44 <HAL_GPIO_Init+0x14>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	372c      	adds	r7, #44	@ 0x2c
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	40010400 	.word	0x40010400

08001d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
 8001d44:	4613      	mov	r3, r2
 8001d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d48:	787b      	ldrb	r3, [r7, #1]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d54:	e003      	b.n	8001d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d56:	887b      	ldrh	r3, [r7, #2]
 8001d58:	041a      	lsls	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	611a      	str	r2, [r3, #16]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	041a      	lsls	r2, r3, #16
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	43d9      	mvns	r1, r3
 8001d86:	887b      	ldrh	r3, [r7, #2]
 8001d88:	400b      	ands	r3, r1
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	611a      	str	r2, [r3, #16]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e272      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8087 	beq.w	8001eca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dbc:	4b92      	ldr	r3, [pc, #584]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d00c      	beq.n	8001de2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dc8:	4b8f      	ldr	r3, [pc, #572]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d112      	bne.n	8001dfa <HAL_RCC_OscConfig+0x5e>
 8001dd4:	4b8c      	ldr	r3, [pc, #560]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de0:	d10b      	bne.n	8001dfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de2:	4b89      	ldr	r3, [pc, #548]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d06c      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x12c>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d168      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e24c      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x76>
 8001e04:	4b80      	ldr	r3, [pc, #512]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a7f      	ldr	r2, [pc, #508]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	e02e      	b.n	8001e70 <HAL_RCC_OscConfig+0xd4>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x98>
 8001e1a:	4b7b      	ldr	r3, [pc, #492]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a7a      	ldr	r2, [pc, #488]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b78      	ldr	r3, [pc, #480]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a77      	ldr	r2, [pc, #476]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e01d      	b.n	8001e70 <HAL_RCC_OscConfig+0xd4>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0xbc>
 8001e3e:	4b72      	ldr	r3, [pc, #456]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a71      	ldr	r2, [pc, #452]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b6f      	ldr	r3, [pc, #444]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6e      	ldr	r2, [pc, #440]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e00b      	b.n	8001e70 <HAL_RCC_OscConfig+0xd4>
 8001e58:	4b6b      	ldr	r3, [pc, #428]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a6a      	ldr	r2, [pc, #424]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4b68      	ldr	r3, [pc, #416]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a67      	ldr	r2, [pc, #412]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d013      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7fe fdd0 	bl	8000a1c <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e80:	f7fe fdcc 	bl	8000a1c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	@ 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e200      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	4b5d      	ldr	r3, [pc, #372]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0xe4>
 8001e9e:	e014      	b.n	8001eca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fdbc 	bl	8000a1c <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7fe fdb8 	bl	8000a1c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	@ 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e1ec      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eba:	4b53      	ldr	r3, [pc, #332]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x10c>
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d063      	beq.n	8001f9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ed6:	4b4c      	ldr	r3, [pc, #304]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ee2:	4b49      	ldr	r3, [pc, #292]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d11c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x18c>
 8001eee:	4b46      	ldr	r3, [pc, #280]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d116      	bne.n	8001f28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	4b43      	ldr	r3, [pc, #268]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_RCC_OscConfig+0x176>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e1c0      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f12:	4b3d      	ldr	r3, [pc, #244]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4939      	ldr	r1, [pc, #228]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f26:	e03a      	b.n	8001f9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f30:	4b36      	ldr	r3, [pc, #216]	@ (800200c <HAL_RCC_OscConfig+0x270>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7fe fd71 	bl	8000a1c <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3e:	f7fe fd6d 	bl	8000a1c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e1a1      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	4b2d      	ldr	r3, [pc, #180]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4927      	ldr	r1, [pc, #156]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]
 8001f70:	e015      	b.n	8001f9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f72:	4b26      	ldr	r3, [pc, #152]	@ (800200c <HAL_RCC_OscConfig+0x270>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7fe fd50 	bl	8000a1c <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f80:	f7fe fd4c 	bl	8000a1c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e180      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f92:	4b1d      	ldr	r3, [pc, #116]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d03a      	beq.n	8002020 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d019      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb2:	4b17      	ldr	r3, [pc, #92]	@ (8002010 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb8:	f7fe fd30 	bl	8000a1c <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7fe fd2c 	bl	8000a1c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e160      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f000 face 	bl	8002580 <RCC_Delay>
 8001fe4:	e01c      	b.n	8002020 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <HAL_RCC_OscConfig+0x274>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7fe fd16 	bl	8000a1c <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff2:	e00f      	b.n	8002014 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7fe fd12 	bl	8000a1c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d908      	bls.n	8002014 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e146      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	42420000 	.word	0x42420000
 8002010:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	4b92      	ldr	r3, [pc, #584]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e9      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80a6 	beq.w	800217a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002032:	4b8b      	ldr	r3, [pc, #556]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10d      	bne.n	800205a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4b88      	ldr	r3, [pc, #544]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a87      	ldr	r2, [pc, #540]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002048:	61d3      	str	r3, [r2, #28]
 800204a:	4b85      	ldr	r3, [pc, #532]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002056:	2301      	movs	r3, #1
 8002058:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	4b82      	ldr	r3, [pc, #520]	@ (8002264 <HAL_RCC_OscConfig+0x4c8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d118      	bne.n	8002098 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002066:	4b7f      	ldr	r3, [pc, #508]	@ (8002264 <HAL_RCC_OscConfig+0x4c8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a7e      	ldr	r2, [pc, #504]	@ (8002264 <HAL_RCC_OscConfig+0x4c8>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002072:	f7fe fcd3 	bl	8000a1c <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7fe fccf 	bl	8000a1c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b64      	cmp	r3, #100	@ 0x64
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e103      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	4b75      	ldr	r3, [pc, #468]	@ (8002264 <HAL_RCC_OscConfig+0x4c8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x312>
 80020a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6213      	str	r3, [r2, #32]
 80020ac:	e02d      	b.n	800210a <HAL_RCC_OscConfig+0x36e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x334>
 80020b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4a69      	ldr	r2, [pc, #420]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	6213      	str	r3, [r2, #32]
 80020c2:	4b67      	ldr	r3, [pc, #412]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4a66      	ldr	r2, [pc, #408]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	f023 0304 	bic.w	r3, r3, #4
 80020cc:	6213      	str	r3, [r2, #32]
 80020ce:	e01c      	b.n	800210a <HAL_RCC_OscConfig+0x36e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCC_OscConfig+0x356>
 80020d8:	4b61      	ldr	r3, [pc, #388]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a60      	ldr	r2, [pc, #384]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6213      	str	r3, [r2, #32]
 80020e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6213      	str	r3, [r2, #32]
 80020f0:	e00b      	b.n	800210a <HAL_RCC_OscConfig+0x36e>
 80020f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	6213      	str	r3, [r2, #32]
 80020fe:	4b58      	ldr	r3, [pc, #352]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4a57      	ldr	r2, [pc, #348]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	f023 0304 	bic.w	r3, r3, #4
 8002108:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d015      	beq.n	800213e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002112:	f7fe fc83 	bl	8000a1c <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002118:	e00a      	b.n	8002130 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7fe fc7f 	bl	8000a1c <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002128:	4293      	cmp	r3, r2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0b1      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002130:	4b4b      	ldr	r3, [pc, #300]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ee      	beq.n	800211a <HAL_RCC_OscConfig+0x37e>
 800213c:	e014      	b.n	8002168 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7fe fc6d 	bl	8000a1c <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe fc69 	bl	8000a1c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e09b      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	4b40      	ldr	r3, [pc, #256]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ee      	bne.n	8002146 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d105      	bne.n	800217a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216e:	4b3c      	ldr	r3, [pc, #240]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4a3b      	ldr	r2, [pc, #236]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002178:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8087 	beq.w	8002292 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002184:	4b36      	ldr	r3, [pc, #216]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b08      	cmp	r3, #8
 800218e:	d061      	beq.n	8002254 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d146      	bne.n	8002226 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002198:	4b33      	ldr	r3, [pc, #204]	@ (8002268 <HAL_RCC_OscConfig+0x4cc>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7fe fc3d 	bl	8000a1c <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a6:	f7fe fc39 	bl	8000a1c <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e06d      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b8:	4b29      	ldr	r3, [pc, #164]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f0      	bne.n	80021a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021cc:	d108      	bne.n	80021e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ce:	4b24      	ldr	r3, [pc, #144]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4921      	ldr	r1, [pc, #132]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a19      	ldr	r1, [r3, #32]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f0:	430b      	orrs	r3, r1
 80021f2:	491b      	ldr	r1, [pc, #108]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <HAL_RCC_OscConfig+0x4cc>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe fc0d 	bl	8000a1c <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe fc09 	bl	8000a1c <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e03d      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002218:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x46a>
 8002224:	e035      	b.n	8002292 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <HAL_RCC_OscConfig+0x4cc>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7fe fbf6 	bl	8000a1c <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002234:	f7fe fbf2 	bl	8000a1c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e026      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x498>
 8002252:	e01e      	b.n	8002292 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d107      	bne.n	800226c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e019      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
 8002260:	40021000 	.word	0x40021000
 8002264:	40007000 	.word	0x40007000
 8002268:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800226c:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <HAL_RCC_OscConfig+0x500>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	429a      	cmp	r2, r3
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000

080022a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0d0      	b.n	8002456 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d910      	bls.n	80022e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b67      	ldr	r3, [pc, #412]	@ (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 0207 	bic.w	r2, r3, #7
 80022ca:	4965      	ldr	r1, [pc, #404]	@ (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d2:	4b63      	ldr	r3, [pc, #396]	@ (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0b8      	b.n	8002456 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022fc:	4b59      	ldr	r3, [pc, #356]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4a58      	ldr	r2, [pc, #352]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002306:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002314:	4b53      	ldr	r3, [pc, #332]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4a52      	ldr	r2, [pc, #328]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800231e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002320:	4b50      	ldr	r3, [pc, #320]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	494d      	ldr	r1, [pc, #308]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d040      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	4b47      	ldr	r3, [pc, #284]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d115      	bne.n	800237e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e07f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d107      	bne.n	800236e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235e:	4b41      	ldr	r3, [pc, #260]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e073      	b.n	8002456 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236e:	4b3d      	ldr	r3, [pc, #244]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e06b      	b.n	8002456 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800237e:	4b39      	ldr	r3, [pc, #228]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f023 0203 	bic.w	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4936      	ldr	r1, [pc, #216]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002390:	f7fe fb44 	bl	8000a1c <HAL_GetTick>
 8002394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002396:	e00a      	b.n	80023ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002398:	f7fe fb40 	bl	8000a1c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e053      	b.n	8002456 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 020c 	and.w	r2, r3, #12
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	429a      	cmp	r2, r3
 80023be:	d1eb      	bne.n	8002398 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023c0:	4b27      	ldr	r3, [pc, #156]	@ (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d210      	bcs.n	80023f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b24      	ldr	r3, [pc, #144]	@ (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 0207 	bic.w	r2, r3, #7
 80023d6:	4922      	ldr	r1, [pc, #136]	@ (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b20      	ldr	r3, [pc, #128]	@ (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e032      	b.n	8002456 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023fc:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4916      	ldr	r1, [pc, #88]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800241a:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	490e      	ldr	r1, [pc, #56]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800242e:	f000 f821 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002432:	4602      	mov	r2, r0
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	490a      	ldr	r1, [pc, #40]	@ (8002468 <HAL_RCC_ClockConfig+0x1c8>)
 8002440:	5ccb      	ldrb	r3, [r1, r3]
 8002442:	fa22 f303 	lsr.w	r3, r2, r3
 8002446:	4a09      	ldr	r2, [pc, #36]	@ (800246c <HAL_RCC_ClockConfig+0x1cc>)
 8002448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800244a:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <HAL_RCC_ClockConfig+0x1d0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe faa2 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40022000 	.word	0x40022000
 8002464:	40021000 	.word	0x40021000
 8002468:	08005c8c 	.word	0x08005c8c
 800246c:	20000000 	.word	0x20000000
 8002470:	20000004 	.word	0x20000004

08002474 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	2300      	movs	r3, #0
 8002488:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800248e:	4b1e      	ldr	r3, [pc, #120]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x94>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b04      	cmp	r3, #4
 800249c:	d002      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x30>
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d003      	beq.n	80024aa <HAL_RCC_GetSysClockFreq+0x36>
 80024a2:	e027      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024a4:	4b19      	ldr	r3, [pc, #100]	@ (800250c <HAL_RCC_GetSysClockFreq+0x98>)
 80024a6:	613b      	str	r3, [r7, #16]
      break;
 80024a8:	e027      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	0c9b      	lsrs	r3, r3, #18
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	4a17      	ldr	r2, [pc, #92]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024b4:	5cd3      	ldrb	r3, [r2, r3]
 80024b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024c2:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x94>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	0c5b      	lsrs	r3, r3, #17
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	4a11      	ldr	r2, [pc, #68]	@ (8002514 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ce:	5cd3      	ldrb	r3, [r2, r3]
 80024d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a0d      	ldr	r2, [pc, #52]	@ (800250c <HAL_RCC_GetSysClockFreq+0x98>)
 80024d6:	fb03 f202 	mul.w	r2, r3, r2
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	e004      	b.n	80024ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002518 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024e8:	fb02 f303 	mul.w	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	613b      	str	r3, [r7, #16]
      break;
 80024f2:	e002      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024f4:	4b05      	ldr	r3, [pc, #20]	@ (800250c <HAL_RCC_GetSysClockFreq+0x98>)
 80024f6:	613b      	str	r3, [r7, #16]
      break;
 80024f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024fa:	693b      	ldr	r3, [r7, #16]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	007a1200 	.word	0x007a1200
 8002510:	08005ca4 	.word	0x08005ca4
 8002514:	08005cb4 	.word	0x08005cb4
 8002518:	003d0900 	.word	0x003d0900

0800251c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002520:	4b02      	ldr	r3, [pc, #8]	@ (800252c <HAL_RCC_GetHCLKFreq+0x10>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	20000000 	.word	0x20000000

08002530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002534:	f7ff fff2 	bl	800251c <HAL_RCC_GetHCLKFreq>
 8002538:	4602      	mov	r2, r0
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	4903      	ldr	r1, [pc, #12]	@ (8002554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002546:	5ccb      	ldrb	r3, [r1, r3]
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	08005c9c 	.word	0x08005c9c

08002558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800255c:	f7ff ffde 	bl	800251c <HAL_RCC_GetHCLKFreq>
 8002560:	4602      	mov	r2, r0
 8002562:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	0adb      	lsrs	r3, r3, #11
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	4903      	ldr	r1, [pc, #12]	@ (800257c <HAL_RCC_GetPCLK2Freq+0x24>)
 800256e:	5ccb      	ldrb	r3, [r1, r3]
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002574:	4618      	mov	r0, r3
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	08005c9c 	.word	0x08005c9c

08002580 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002588:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <RCC_Delay+0x34>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0a      	ldr	r2, [pc, #40]	@ (80025b8 <RCC_Delay+0x38>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	0a5b      	lsrs	r3, r3, #9
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800259c:	bf00      	nop
  }
  while (Delay --);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1e5a      	subs	r2, r3, #1
 80025a2:	60fa      	str	r2, [r7, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f9      	bne.n	800259c <RCC_Delay+0x1c>
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	20000000 	.word	0x20000000
 80025b8:	10624dd3 	.word	0x10624dd3

080025bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e042      	b.n	8002654 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe f906 	bl	80007f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2224      	movs	r2, #36	@ 0x24
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 fd09 	bl	8003018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	4613      	mov	r3, r2
 8002668:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b20      	cmp	r3, #32
 8002674:	d121      	bne.n	80026ba <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <HAL_UART_Transmit_IT+0x26>
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e01a      	b.n	80026bc <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	88fa      	ldrh	r2, [r7, #6]
 8002690:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	88fa      	ldrh	r2, [r7, #6]
 8002696:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2221      	movs	r2, #33	@ 0x21
 80026a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026b4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e000      	b.n	80026bc <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80026ba:	2302      	movs	r3, #2
  }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	4613      	mov	r3, r2
 80026d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d112      	bne.n	8002706 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_UART_Receive_IT+0x26>
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e00b      	b.n	8002708 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	461a      	mov	r2, r3
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fab6 	bl	8002c6e <UART_Start_Receive_IT>
 8002702:	4603      	mov	r3, r0
 8002704:	e000      	b.n	8002708 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002706:	2302      	movs	r3, #2
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b0ba      	sub	sp, #232	@ 0xe8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800274e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_UART_IRQHandler+0x66>
 8002762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fb93 	bl	8002e9a <UART_Receive_IT>
      return;
 8002774:	e25b      	b.n	8002c2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 80de 	beq.w	800293c <HAL_UART_IRQHandler+0x22c>
 8002780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d106      	bne.n	800279a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800278c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002790:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80d1 	beq.w	800293c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800279a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_UART_IRQHandler+0xae>
 80027a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	f043 0201 	orr.w	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_UART_IRQHandler+0xd2>
 80027ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027da:	f043 0202 	orr.w	r2, r3, #2
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_UART_IRQHandler+0xf6>
 80027ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	f043 0204 	orr.w	r2, r3, #4
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d011      	beq.n	8002836 <HAL_UART_IRQHandler+0x126>
 8002812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800281e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282e:	f043 0208 	orr.w	r2, r3, #8
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 81f2 	beq.w	8002c24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_UART_IRQHandler+0x14e>
 800284c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fb1e 	bl	8002e9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <HAL_UART_IRQHandler+0x17a>
 8002882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d04f      	beq.n	800292a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fa28 	bl	8002ce0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d041      	beq.n	8002922 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3314      	adds	r3, #20
 80028a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80028b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3314      	adds	r3, #20
 80028c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80028ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80028ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80028d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80028da:	e841 2300 	strex	r3, r2, [r1]
 80028de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80028e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1d9      	bne.n	800289e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d013      	beq.n	800291a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f6:	4a7e      	ldr	r2, [pc, #504]	@ (8002af0 <HAL_UART_IRQHandler+0x3e0>)
 80028f8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f81e 	bl	8001940 <HAL_DMA_Abort_IT>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002914:	4610      	mov	r0, r2
 8002916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002918:	e00e      	b.n	8002938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f993 	bl	8002c46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002920:	e00a      	b.n	8002938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f98f 	bl	8002c46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002928:	e006      	b.n	8002938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f98b 	bl	8002c46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002936:	e175      	b.n	8002c24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002938:	bf00      	nop
    return;
 800293a:	e173      	b.n	8002c24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002940:	2b01      	cmp	r3, #1
 8002942:	f040 814f 	bne.w	8002be4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8148 	beq.w	8002be4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8141 	beq.w	8002be4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80b6 	beq.w	8002af4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002994:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8145 	beq.w	8002c28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80029a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029a6:	429a      	cmp	r2, r3
 80029a8:	f080 813e 	bcs.w	8002c28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	f000 8088 	beq.w	8002ad0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	330c      	adds	r3, #12
 80029c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029ce:	e853 3f00 	ldrex	r3, [r3]
 80029d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80029d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	330c      	adds	r3, #12
 80029e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80029ec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80029f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029fc:	e841 2300 	strex	r3, r2, [r1]
 8002a00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1d9      	bne.n	80029c0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3314      	adds	r3, #20
 8002a12:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a16:	e853 3f00 	ldrex	r3, [r3]
 8002a1a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3314      	adds	r3, #20
 8002a2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a30:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a34:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a36:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a3c:	e841 2300 	strex	r3, r2, [r1]
 8002a40:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1e1      	bne.n	8002a0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3314      	adds	r3, #20
 8002a4e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a52:	e853 3f00 	ldrex	r3, [r3]
 8002a56:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3314      	adds	r3, #20
 8002a68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a6c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a6e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a70:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a74:	e841 2300 	strex	r3, r2, [r1]
 8002a78:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002a7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e3      	bne.n	8002a48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	330c      	adds	r3, #12
 8002a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a98:	e853 3f00 	ldrex	r3, [r3]
 8002a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aa0:	f023 0310 	bic.w	r3, r3, #16
 8002aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	330c      	adds	r3, #12
 8002aae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002ab2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ab4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ab8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002aba:	e841 2300 	strex	r3, r2, [r1]
 8002abe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1e3      	bne.n	8002a8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fefd 	bl	80018ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8b6 	bl	8002c58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002aec:	e09c      	b.n	8002c28 <HAL_UART_IRQHandler+0x518>
 8002aee:	bf00      	nop
 8002af0:	08002da5 	.word	0x08002da5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 808e 	beq.w	8002c2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 8089 	beq.w	8002c2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	330c      	adds	r3, #12
 8002b20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b24:	e853 3f00 	ldrex	r3, [r3]
 8002b28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	330c      	adds	r3, #12
 8002b3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002b3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002b40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b46:	e841 2300 	strex	r3, r2, [r1]
 8002b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1e3      	bne.n	8002b1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3314      	adds	r3, #20
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
 8002b60:	623b      	str	r3, [r7, #32]
   return(result);
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3314      	adds	r3, #20
 8002b72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b76:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b7e:	e841 2300 	strex	r3, r2, [r1]
 8002b82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1e3      	bne.n	8002b52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	330c      	adds	r3, #12
 8002b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	e853 3f00 	ldrex	r3, [r3]
 8002ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0310 	bic.w	r3, r3, #16
 8002bae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	330c      	adds	r3, #12
 8002bb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002bbc:	61fa      	str	r2, [r7, #28]
 8002bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc0:	69b9      	ldr	r1, [r7, #24]
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	e841 2300 	strex	r3, r2, [r1]
 8002bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e3      	bne.n	8002b98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f83b 	bl	8002c58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002be2:	e023      	b.n	8002c2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d009      	beq.n	8002c04 <HAL_UART_IRQHandler+0x4f4>
 8002bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f8e5 	bl	8002dcc <UART_Transmit_IT>
    return;
 8002c02:	e014      	b.n	8002c2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00e      	beq.n	8002c2e <HAL_UART_IRQHandler+0x51e>
 8002c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f924 	bl	8002e6a <UART_EndTransmit_IT>
    return;
 8002c22:	e004      	b.n	8002c2e <HAL_UART_IRQHandler+0x51e>
    return;
 8002c24:	bf00      	nop
 8002c26:	e002      	b.n	8002c2e <HAL_UART_IRQHandler+0x51e>
      return;
 8002c28:	bf00      	nop
 8002c2a:	e000      	b.n	8002c2e <HAL_UART_IRQHandler+0x51e>
      return;
 8002c2c:	bf00      	nop
  }
}
 8002c2e:	37e8      	adds	r7, #232	@ 0xe8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	88fa      	ldrh	r2, [r7, #6]
 8002c86:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	88fa      	ldrh	r2, [r7, #6]
 8002c8c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2222      	movs	r2, #34	@ 0x22
 8002c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cb2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0220 	orr.w	r2, r2, #32
 8002cd2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b095      	sub	sp, #84	@ 0x54
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	330c      	adds	r3, #12
 8002cee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf2:	e853 3f00 	ldrex	r3, [r3]
 8002cf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	330c      	adds	r3, #12
 8002d06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d08:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d10:	e841 2300 	strex	r3, r2, [r1]
 8002d14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e5      	bne.n	8002ce8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3314      	adds	r3, #20
 8002d22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	e853 3f00 	ldrex	r3, [r3]
 8002d2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f023 0301 	bic.w	r3, r3, #1
 8002d32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3314      	adds	r3, #20
 8002d3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d44:	e841 2300 	strex	r3, r2, [r1]
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e5      	bne.n	8002d1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d119      	bne.n	8002d8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	330c      	adds	r3, #12
 8002d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	e853 3f00 	ldrex	r3, [r3]
 8002d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f023 0310 	bic.w	r3, r3, #16
 8002d6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	330c      	adds	r3, #12
 8002d76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d78:	61ba      	str	r2, [r7, #24]
 8002d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7c:	6979      	ldr	r1, [r7, #20]
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	e841 2300 	strex	r3, r2, [r1]
 8002d84:	613b      	str	r3, [r7, #16]
   return(result);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e5      	bne.n	8002d58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d9a:	bf00      	nop
 8002d9c:	3754      	adds	r7, #84	@ 0x54
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff ff41 	bl	8002c46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b21      	cmp	r3, #33	@ 0x21
 8002dde:	d13e      	bne.n	8002e5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de8:	d114      	bne.n	8002e14 <UART_Transmit_IT+0x48>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d110      	bne.n	8002e14 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	1c9a      	adds	r2, r3, #2
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	621a      	str	r2, [r3, #32]
 8002e12:	e008      	b.n	8002e26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	1c59      	adds	r1, r3, #1
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6211      	str	r1, [r2, #32]
 8002e1e:	781a      	ldrb	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4619      	mov	r1, r3
 8002e34:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
  }
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff fed2 	bl	8002c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b08c      	sub	sp, #48	@ 0x30
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b22      	cmp	r3, #34	@ 0x22
 8002eac:	f040 80ae 	bne.w	800300c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eb8:	d117      	bne.n	8002eea <UART_Receive_IT+0x50>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d113      	bne.n	8002eea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002edc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee2:	1c9a      	adds	r2, r3, #2
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ee8:	e026      	b.n	8002f38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002efc:	d007      	beq.n	8002f0e <UART_Receive_IT+0x74>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <UART_Receive_IT+0x82>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e008      	b.n	8002f2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4619      	mov	r1, r3
 8002f46:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d15d      	bne.n	8003008 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0220 	bic.w	r2, r2, #32
 8002f5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d135      	bne.n	8002ffe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	e853 3f00 	ldrex	r3, [r3]
 8002fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f023 0310 	bic.w	r3, r3, #16
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	330c      	adds	r3, #12
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb8:	623a      	str	r2, [r7, #32]
 8002fba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbc:	69f9      	ldr	r1, [r7, #28]
 8002fbe:	6a3a      	ldr	r2, [r7, #32]
 8002fc0:	e841 2300 	strex	r3, r2, [r1]
 8002fc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e5      	bne.n	8002f98 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d10a      	bne.n	8002ff0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff fe2e 	bl	8002c58 <HAL_UARTEx_RxEventCallback>
 8002ffc:	e002      	b.n	8003004 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd f942 	bl	8000288 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e002      	b.n	800300e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
  }
}
 800300e:	4618      	mov	r0, r3
 8003010:	3730      	adds	r7, #48	@ 0x30
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003052:	f023 030c 	bic.w	r3, r3, #12
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	430b      	orrs	r3, r1
 800305e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a2c      	ldr	r2, [pc, #176]	@ (800312c <UART_SetConfig+0x114>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d103      	bne.n	8003088 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003080:	f7ff fa6a 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	e002      	b.n	800308e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003088:	f7ff fa52 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 800308c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009a      	lsls	r2, r3, #2
 8003098:	441a      	add	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	4a22      	ldr	r2, [pc, #136]	@ (8003130 <UART_SetConfig+0x118>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	0119      	lsls	r1, r3, #4
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	009a      	lsls	r2, r3, #2
 80030b8:	441a      	add	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003130 <UART_SetConfig+0x118>)
 80030c6:	fba3 0302 	umull	r0, r3, r3, r2
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	2064      	movs	r0, #100	@ 0x64
 80030ce:	fb00 f303 	mul.w	r3, r0, r3
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	3332      	adds	r3, #50	@ 0x32
 80030d8:	4a15      	ldr	r2, [pc, #84]	@ (8003130 <UART_SetConfig+0x118>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030e4:	4419      	add	r1, r3
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	009a      	lsls	r2, r3, #2
 80030f0:	441a      	add	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003130 <UART_SetConfig+0x118>)
 80030fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	2064      	movs	r0, #100	@ 0x64
 8003106:	fb00 f303 	mul.w	r3, r0, r3
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	3332      	adds	r3, #50	@ 0x32
 8003110:	4a07      	ldr	r2, [pc, #28]	@ (8003130 <UART_SetConfig+0x118>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	f003 020f 	and.w	r2, r3, #15
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	440a      	add	r2, r1
 8003122:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40013800 	.word	0x40013800
 8003130:	51eb851f 	.word	0x51eb851f

08003134 <__NVIC_SetPriority>:
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	2b00      	cmp	r3, #0
 8003146:	db0a      	blt.n	800315e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	490c      	ldr	r1, [pc, #48]	@ (8003180 <__NVIC_SetPriority+0x4c>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	440b      	add	r3, r1
 8003158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800315c:	e00a      	b.n	8003174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4908      	ldr	r1, [pc, #32]	@ (8003184 <__NVIC_SetPriority+0x50>)
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	3b04      	subs	r3, #4
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	440b      	add	r3, r1
 8003172:	761a      	strb	r2, [r3, #24]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000e100 	.word	0xe000e100
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800318c:	2100      	movs	r1, #0
 800318e:	f06f 0004 	mvn.w	r0, #4
 8003192:	f7ff ffcf 	bl	8003134 <__NVIC_SetPriority>
#endif
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031a2:	f3ef 8305 	mrs	r3, IPSR
 80031a6:	603b      	str	r3, [r7, #0]
  return(result);
 80031a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80031ae:	f06f 0305 	mvn.w	r3, #5
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	e00c      	b.n	80031d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80031b6:	4b09      	ldr	r3, [pc, #36]	@ (80031dc <osKernelInitialize+0x40>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d105      	bne.n	80031ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80031be:	4b07      	ldr	r3, [pc, #28]	@ (80031dc <osKernelInitialize+0x40>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	e002      	b.n	80031d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80031ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80031d0:	687b      	ldr	r3, [r7, #4]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr
 80031dc:	200000e4 	.word	0x200000e4

080031e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031e6:	f3ef 8305 	mrs	r3, IPSR
 80031ea:	603b      	str	r3, [r7, #0]
  return(result);
 80031ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80031f2:	f06f 0305 	mvn.w	r3, #5
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	e010      	b.n	800321c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80031fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003228 <osKernelStart+0x48>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d109      	bne.n	8003216 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003202:	f7ff ffc1 	bl	8003188 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003206:	4b08      	ldr	r3, [pc, #32]	@ (8003228 <osKernelStart+0x48>)
 8003208:	2202      	movs	r2, #2
 800320a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800320c:	f001 f872 	bl	80042f4 <vTaskStartScheduler>
      stat = osOK;
 8003210:	2300      	movs	r3, #0
 8003212:	607b      	str	r3, [r7, #4]
 8003214:	e002      	b.n	800321c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800321a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800321c:	687b      	ldr	r3, [r7, #4]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200000e4 	.word	0x200000e4

0800322c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b08e      	sub	sp, #56	@ 0x38
 8003230:	af04      	add	r7, sp, #16
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800323c:	f3ef 8305 	mrs	r3, IPSR
 8003240:	617b      	str	r3, [r7, #20]
  return(result);
 8003242:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003244:	2b00      	cmp	r3, #0
 8003246:	d17e      	bne.n	8003346 <osThreadNew+0x11a>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d07b      	beq.n	8003346 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800324e:	2380      	movs	r3, #128	@ 0x80
 8003250:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003252:	2318      	movs	r3, #24
 8003254:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800325a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800325e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d045      	beq.n	80032f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <osThreadNew+0x48>
        name = attr->name;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <osThreadNew+0x6e>
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	2b38      	cmp	r3, #56	@ 0x38
 800328c:	d805      	bhi.n	800329a <osThreadNew+0x6e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <osThreadNew+0x72>
        return (NULL);
 800329a:	2300      	movs	r3, #0
 800329c:	e054      	b.n	8003348 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00e      	beq.n	80032d4 <osThreadNew+0xa8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	2b5b      	cmp	r3, #91	@ 0x5b
 80032bc:	d90a      	bls.n	80032d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d006      	beq.n	80032d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <osThreadNew+0xa8>
        mem = 1;
 80032ce:	2301      	movs	r3, #1
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	e010      	b.n	80032f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10c      	bne.n	80032f6 <osThreadNew+0xca>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d108      	bne.n	80032f6 <osThreadNew+0xca>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d104      	bne.n	80032f6 <osThreadNew+0xca>
          mem = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	e001      	b.n	80032f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d110      	bne.n	800331e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003304:	9202      	str	r2, [sp, #8]
 8003306:	9301      	str	r3, [sp, #4]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	6a3a      	ldr	r2, [r7, #32]
 8003310:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 fe12 	bl	8003f3c <xTaskCreateStatic>
 8003318:	4603      	mov	r3, r0
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	e013      	b.n	8003346 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d110      	bne.n	8003346 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	b29a      	uxth	r2, r3
 8003328:	f107 0310 	add.w	r3, r7, #16
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 fe60 	bl	8003ffc <xTaskCreate>
 800333c:	4603      	mov	r3, r0
 800333e:	2b01      	cmp	r3, #1
 8003340:	d001      	beq.n	8003346 <osThreadNew+0x11a>
            hTask = NULL;
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003346:	693b      	ldr	r3, [r7, #16]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3728      	adds	r7, #40	@ 0x28
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003358:	f3ef 8305 	mrs	r3, IPSR
 800335c:	60bb      	str	r3, [r7, #8]
  return(result);
 800335e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <osDelay+0x1c>
    stat = osErrorISR;
 8003364:	f06f 0305 	mvn.w	r3, #5
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	e007      	b.n	800337c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 ff86 	bl	8004288 <vTaskDelay>
    }
  }

  return (stat);
 800337c:	68fb      	ldr	r3, [r7, #12]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a06      	ldr	r2, [pc, #24]	@ (80033b0 <vApplicationGetIdleTaskMemory+0x28>)
 8003398:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4a05      	ldr	r2, [pc, #20]	@ (80033b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800339e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2280      	movs	r2, #128	@ 0x80
 80033a4:	601a      	str	r2, [r3, #0]
}
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	200000e8 	.word	0x200000e8
 80033b4:	20000144 	.word	0x20000144

080033b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a07      	ldr	r2, [pc, #28]	@ (80033e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80033c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	4a06      	ldr	r2, [pc, #24]	@ (80033e8 <vApplicationGetTimerTaskMemory+0x30>)
 80033ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033d6:	601a      	str	r2, [r3, #0]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000344 	.word	0x20000344
 80033e8:	200003a0 	.word	0x200003a0

080033ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f103 0208 	add.w	r2, r3, #8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003404:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f103 0208 	add.w	r2, r3, #8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f103 0208 	add.w	r2, r3, #8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	601a      	str	r2, [r3, #0]
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800349e:	d103      	bne.n	80034a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	e00c      	b.n	80034c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3308      	adds	r3, #8
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	e002      	b.n	80034b6 <vListInsert+0x2e>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d2f6      	bcs.n	80034b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	601a      	str	r2, [r3, #0]
}
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6892      	ldr	r2, [r2, #8]
 800350e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6852      	ldr	r2, [r2, #4]
 8003518:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	429a      	cmp	r2, r3
 8003522:	d103      	bne.n	800352c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	1e5a      	subs	r2, r3, #1
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr
	...

0800354c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003572:	bf00      	nop
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003578:	f002 f830 	bl	80055dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003584:	68f9      	ldr	r1, [r7, #12]
 8003586:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	441a      	add	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	3b01      	subs	r3, #1
 80035aa:	68f9      	ldr	r1, [r7, #12]
 80035ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80035ae:	fb01 f303 	mul.w	r3, r1, r3
 80035b2:	441a      	add	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	22ff      	movs	r2, #255	@ 0xff
 80035bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	22ff      	movs	r2, #255	@ 0xff
 80035c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d114      	bne.n	80035f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01a      	beq.n	800360c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3310      	adds	r3, #16
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 f916 	bl	800480c <xTaskRemoveFromEventList>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d012      	beq.n	800360c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <xQueueGenericReset+0xd0>)
 80035e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	e009      	b.n	800360c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3310      	adds	r3, #16
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff fef5 	bl	80033ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3324      	adds	r3, #36	@ 0x24
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fef0 	bl	80033ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800360c:	f002 f816 	bl	800563c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003610:	2301      	movs	r3, #1
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	e000ed04 	.word	0xe000ed04

08003620 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08e      	sub	sp, #56	@ 0x38
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10b      	bne.n	800364c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003646:	bf00      	nop
 8003648:	bf00      	nop
 800364a:	e7fd      	b.n	8003648 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10b      	bne.n	800366a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003656:	f383 8811 	msr	BASEPRI, r3
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	e7fd      	b.n	8003666 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <xQueueGenericCreateStatic+0x56>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <xQueueGenericCreateStatic+0x5a>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <xQueueGenericCreateStatic+0x5c>
 800367a:	2300      	movs	r3, #0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	623b      	str	r3, [r7, #32]
}
 8003692:	bf00      	nop
 8003694:	bf00      	nop
 8003696:	e7fd      	b.n	8003694 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d102      	bne.n	80036a4 <xQueueGenericCreateStatic+0x84>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <xQueueGenericCreateStatic+0x88>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <xQueueGenericCreateStatic+0x8a>
 80036a8:	2300      	movs	r3, #0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10b      	bne.n	80036c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	61fb      	str	r3, [r7, #28]
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	e7fd      	b.n	80036c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80036c6:	2350      	movs	r3, #80	@ 0x50
 80036c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b50      	cmp	r3, #80	@ 0x50
 80036ce:	d00b      	beq.n	80036e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	61bb      	str	r3, [r7, #24]
}
 80036e2:	bf00      	nop
 80036e4:	bf00      	nop
 80036e6:	e7fd      	b.n	80036e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80036e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80036ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00d      	beq.n	8003710 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80036f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f805 	bl	800371a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003712:	4618      	mov	r0, r3
 8003714:	3730      	adds	r7, #48	@ 0x30
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d103      	bne.n	8003736 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e002      	b.n	800373c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003748:	2101      	movs	r1, #1
 800374a:	69b8      	ldr	r0, [r7, #24]
 800374c:	f7ff fefe 	bl	800354c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	@ 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800376e:	2300      	movs	r3, #0
 8003770:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10b      	bne.n	8003794 <xQueueGenericSend+0x34>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800378e:	bf00      	nop
 8003790:	bf00      	nop
 8003792:	e7fd      	b.n	8003790 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d103      	bne.n	80037a2 <xQueueGenericSend+0x42>
 800379a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <xQueueGenericSend+0x46>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <xQueueGenericSend+0x48>
 80037a6:	2300      	movs	r3, #0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <xQueueGenericSend+0x64>
	__asm volatile
 80037ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80037be:	bf00      	nop
 80037c0:	bf00      	nop
 80037c2:	e7fd      	b.n	80037c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d103      	bne.n	80037d2 <xQueueGenericSend+0x72>
 80037ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <xQueueGenericSend+0x76>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <xQueueGenericSend+0x78>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10b      	bne.n	80037f4 <xQueueGenericSend+0x94>
	__asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	623b      	str	r3, [r7, #32]
}
 80037ee:	bf00      	nop
 80037f0:	bf00      	nop
 80037f2:	e7fd      	b.n	80037f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037f4:	f001 f9ca 	bl	8004b8c <xTaskGetSchedulerState>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d102      	bne.n	8003804 <xQueueGenericSend+0xa4>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <xQueueGenericSend+0xa8>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <xQueueGenericSend+0xaa>
 8003808:	2300      	movs	r3, #0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10b      	bne.n	8003826 <xQueueGenericSend+0xc6>
	__asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	61fb      	str	r3, [r7, #28]
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	e7fd      	b.n	8003822 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003826:	f001 fed9 	bl	80055dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800382a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800382e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <xQueueGenericSend+0xdc>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d129      	bne.n	8003890 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003842:	f000 fa0f 	bl	8003c64 <prvCopyDataToQueue>
 8003846:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	2b00      	cmp	r3, #0
 800384e:	d010      	beq.n	8003872 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003852:	3324      	adds	r3, #36	@ 0x24
 8003854:	4618      	mov	r0, r3
 8003856:	f000 ffd9 	bl	800480c <xTaskRemoveFromEventList>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d013      	beq.n	8003888 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003860:	4b3f      	ldr	r3, [pc, #252]	@ (8003960 <xQueueGenericSend+0x200>)
 8003862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	e00a      	b.n	8003888 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003878:	4b39      	ldr	r3, [pc, #228]	@ (8003960 <xQueueGenericSend+0x200>)
 800387a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003888:	f001 fed8 	bl	800563c <vPortExitCritical>
				return pdPASS;
 800388c:	2301      	movs	r3, #1
 800388e:	e063      	b.n	8003958 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003896:	f001 fed1 	bl	800563c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800389a:	2300      	movs	r3, #0
 800389c:	e05c      	b.n	8003958 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800389e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d106      	bne.n	80038b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 f813 	bl	80048d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038ae:	2301      	movs	r3, #1
 80038b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038b2:	f001 fec3 	bl	800563c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038b6:	f000 fd85 	bl	80043c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038ba:	f001 fe8f 	bl	80055dc <vPortEnterCritical>
 80038be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038c4:	b25b      	sxtb	r3, r3
 80038c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038ca:	d103      	bne.n	80038d4 <xQueueGenericSend+0x174>
 80038cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038da:	b25b      	sxtb	r3, r3
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038e0:	d103      	bne.n	80038ea <xQueueGenericSend+0x18a>
 80038e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038ea:	f001 fea7 	bl	800563c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038ee:	1d3a      	adds	r2, r7, #4
 80038f0:	f107 0314 	add.w	r3, r7, #20
 80038f4:	4611      	mov	r1, r2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 f802 	bl	8004900 <xTaskCheckForTimeOut>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d124      	bne.n	800394c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003902:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003904:	f000 faa6 	bl	8003e54 <prvIsQueueFull>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d018      	beq.n	8003940 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800390e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003910:	3310      	adds	r3, #16
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4611      	mov	r1, r2
 8003916:	4618      	mov	r0, r3
 8003918:	f000 ff26 	bl	8004768 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800391c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800391e:	f000 fa31 	bl	8003d84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003922:	f000 fd5d 	bl	80043e0 <xTaskResumeAll>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	f47f af7c 	bne.w	8003826 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800392e:	4b0c      	ldr	r3, [pc, #48]	@ (8003960 <xQueueGenericSend+0x200>)
 8003930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	e772      	b.n	8003826 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003942:	f000 fa1f 	bl	8003d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003946:	f000 fd4b 	bl	80043e0 <xTaskResumeAll>
 800394a:	e76c      	b.n	8003826 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800394c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800394e:	f000 fa19 	bl	8003d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003952:	f000 fd45 	bl	80043e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003956:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003958:	4618      	mov	r0, r3
 800395a:	3738      	adds	r7, #56	@ 0x38
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	e000ed04 	.word	0xe000ed04

08003964 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b090      	sub	sp, #64	@ 0x40
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10b      	bne.n	8003994 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800398e:	bf00      	nop
 8003990:	bf00      	nop
 8003992:	e7fd      	b.n	8003990 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <xQueueGenericSendFromISR+0x3e>
 800399a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <xQueueGenericSendFromISR+0x42>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <xQueueGenericSendFromISR+0x44>
 80039a6:	2300      	movs	r3, #0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10b      	bne.n	80039c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80039be:	bf00      	nop
 80039c0:	bf00      	nop
 80039c2:	e7fd      	b.n	80039c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d103      	bne.n	80039d2 <xQueueGenericSendFromISR+0x6e>
 80039ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <xQueueGenericSendFromISR+0x72>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <xQueueGenericSendFromISR+0x74>
 80039d6:	2300      	movs	r3, #0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10b      	bne.n	80039f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80039dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e0:	f383 8811 	msr	BASEPRI, r3
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	623b      	str	r3, [r7, #32]
}
 80039ee:	bf00      	nop
 80039f0:	bf00      	nop
 80039f2:	e7fd      	b.n	80039f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039f4:	f001 feb4 	bl	8005760 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80039f8:	f3ef 8211 	mrs	r2, BASEPRI
 80039fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	61fa      	str	r2, [r7, #28]
 8003a0e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d302      	bcc.n	8003a26 <xQueueGenericSendFromISR+0xc2>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d12f      	bne.n	8003a86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003a3c:	f000 f912 	bl	8003c64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a48:	d112      	bne.n	8003a70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d016      	beq.n	8003a80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a54:	3324      	adds	r3, #36	@ 0x24
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fed8 	bl	800480c <xTaskRemoveFromEventList>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00e      	beq.n	8003a80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00b      	beq.n	8003a80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e007      	b.n	8003a80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003a74:	3301      	adds	r3, #1
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	b25a      	sxtb	r2, r3
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003a80:	2301      	movs	r3, #1
 8003a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003a84:	e001      	b.n	8003a8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3740      	adds	r7, #64	@ 0x40
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08c      	sub	sp, #48	@ 0x30
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10b      	bne.n	8003ad2 <xQueueReceive+0x32>
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	623b      	str	r3, [r7, #32]
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	e7fd      	b.n	8003ace <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d103      	bne.n	8003ae0 <xQueueReceive+0x40>
 8003ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <xQueueReceive+0x44>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <xQueueReceive+0x46>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10b      	bne.n	8003b02 <xQueueReceive+0x62>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	61fb      	str	r3, [r7, #28]
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	e7fd      	b.n	8003afe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b02:	f001 f843 	bl	8004b8c <xTaskGetSchedulerState>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d102      	bne.n	8003b12 <xQueueReceive+0x72>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <xQueueReceive+0x76>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <xQueueReceive+0x78>
 8003b16:	2300      	movs	r3, #0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10b      	bne.n	8003b34 <xQueueReceive+0x94>
	__asm volatile
 8003b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	61bb      	str	r3, [r7, #24]
}
 8003b2e:	bf00      	nop
 8003b30:	bf00      	nop
 8003b32:	e7fd      	b.n	8003b30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b34:	f001 fd52 	bl	80055dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01f      	beq.n	8003b84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b48:	f000 f8f6 	bl	8003d38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4e:	1e5a      	subs	r2, r3, #1
 8003b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00f      	beq.n	8003b7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	3310      	adds	r3, #16
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fe53 	bl	800480c <xTaskRemoveFromEventList>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b6c:	4b3c      	ldr	r3, [pc, #240]	@ (8003c60 <xQueueReceive+0x1c0>)
 8003b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b7c:	f001 fd5e 	bl	800563c <vPortExitCritical>
				return pdPASS;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e069      	b.n	8003c58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b8a:	f001 fd57 	bl	800563c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e062      	b.n	8003c58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d106      	bne.n	8003ba6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b98:	f107 0310 	add.w	r3, r7, #16
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fe99 	bl	80048d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ba6:	f001 fd49 	bl	800563c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003baa:	f000 fc0b 	bl	80043c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bae:	f001 fd15 	bl	80055dc <vPortEnterCritical>
 8003bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bb8:	b25b      	sxtb	r3, r3
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bbe:	d103      	bne.n	8003bc8 <xQueueReceive+0x128>
 8003bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bce:	b25b      	sxtb	r3, r3
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bd4:	d103      	bne.n	8003bde <xQueueReceive+0x13e>
 8003bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bde:	f001 fd2d 	bl	800563c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003be2:	1d3a      	adds	r2, r7, #4
 8003be4:	f107 0310 	add.w	r3, r7, #16
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fe88 	bl	8004900 <xTaskCheckForTimeOut>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d123      	bne.n	8003c3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003bf8:	f000 f916 	bl	8003e28 <prvIsQueueEmpty>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d017      	beq.n	8003c32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c04:	3324      	adds	r3, #36	@ 0x24
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fdac 	bl	8004768 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c12:	f000 f8b7 	bl	8003d84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c16:	f000 fbe3 	bl	80043e0 <xTaskResumeAll>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d189      	bne.n	8003b34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003c20:	4b0f      	ldr	r3, [pc, #60]	@ (8003c60 <xQueueReceive+0x1c0>)
 8003c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	e780      	b.n	8003b34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c34:	f000 f8a6 	bl	8003d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c38:	f000 fbd2 	bl	80043e0 <xTaskResumeAll>
 8003c3c:	e77a      	b.n	8003b34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c40:	f000 f8a0 	bl	8003d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c44:	f000 fbcc 	bl	80043e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c4a:	f000 f8ed 	bl	8003e28 <prvIsQueueEmpty>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f43f af6f 	beq.w	8003b34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3730      	adds	r7, #48	@ 0x30
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	e000ed04 	.word	0xe000ed04

08003c64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10d      	bne.n	8003c9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d14d      	bne.n	8003d26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 ff9a 	bl	8004bc8 <xTaskPriorityDisinherit>
 8003c94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	e043      	b.n	8003d26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d119      	bne.n	8003cd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6858      	ldr	r0, [r3, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cac:	461a      	mov	r2, r3
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	f001 ffae 	bl	8005c10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbc:	441a      	add	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d32b      	bcc.n	8003d26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	e026      	b.n	8003d26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68d8      	ldr	r0, [r3, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	f001 ff94 	bl	8005c10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	425b      	negs	r3, r3
 8003cf2:	441a      	add	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d207      	bcs.n	8003d14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	425b      	negs	r3, r3
 8003d0e:	441a      	add	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d105      	bne.n	8003d26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003d2e:	697b      	ldr	r3, [r7, #20]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d018      	beq.n	8003d7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	441a      	add	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d303      	bcc.n	8003d6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68d9      	ldr	r1, [r3, #12]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d74:	461a      	mov	r2, r3
 8003d76:	6838      	ldr	r0, [r7, #0]
 8003d78:	f001 ff4a 	bl	8005c10 <memcpy>
	}
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d8c:	f001 fc26 	bl	80055dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d98:	e011      	b.n	8003dbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d012      	beq.n	8003dc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3324      	adds	r3, #36	@ 0x24
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fd30 	bl	800480c <xTaskRemoveFromEventList>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003db2:	f000 fe09 	bl	80049c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	dce9      	bgt.n	8003d9a <prvUnlockQueue+0x16>
 8003dc6:	e000      	b.n	8003dca <prvUnlockQueue+0x46>
					break;
 8003dc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	22ff      	movs	r2, #255	@ 0xff
 8003dce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003dd2:	f001 fc33 	bl	800563c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003dd6:	f001 fc01 	bl	80055dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003de0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003de2:	e011      	b.n	8003e08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d012      	beq.n	8003e12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3310      	adds	r3, #16
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fd0b 	bl	800480c <xTaskRemoveFromEventList>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003dfc:	f000 fde4 	bl	80049c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e00:	7bbb      	ldrb	r3, [r7, #14]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	dce9      	bgt.n	8003de4 <prvUnlockQueue+0x60>
 8003e10:	e000      	b.n	8003e14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	22ff      	movs	r2, #255	@ 0xff
 8003e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003e1c:	f001 fc0e 	bl	800563c <vPortExitCritical>
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e30:	f001 fbd4 	bl	80055dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d102      	bne.n	8003e42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	e001      	b.n	8003e46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e46:	f001 fbf9 	bl	800563c <vPortExitCritical>

	return xReturn;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e5c:	f001 fbbe 	bl	80055dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d102      	bne.n	8003e72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	e001      	b.n	8003e76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e76:	f001 fbe1 	bl	800563c <vPortExitCritical>

	return xReturn;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	e014      	b.n	8003ebe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e94:	4a0e      	ldr	r2, [pc, #56]	@ (8003ed0 <vQueueAddToRegistry+0x4c>)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ea0:	490b      	ldr	r1, [pc, #44]	@ (8003ed0 <vQueueAddToRegistry+0x4c>)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003eaa:	4a09      	ldr	r2, [pc, #36]	@ (8003ed0 <vQueueAddToRegistry+0x4c>)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003eb6:	e006      	b.n	8003ec6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b07      	cmp	r3, #7
 8003ec2:	d9e7      	bls.n	8003e94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr
 8003ed0:	200007a0 	.word	0x200007a0

08003ed4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ee4:	f001 fb7a 	bl	80055dc <vPortEnterCritical>
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003eee:	b25b      	sxtb	r3, r3
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ef4:	d103      	bne.n	8003efe <vQueueWaitForMessageRestricted+0x2a>
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f04:	b25b      	sxtb	r3, r3
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f0a:	d103      	bne.n	8003f14 <vQueueWaitForMessageRestricted+0x40>
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f14:	f001 fb92 	bl	800563c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d106      	bne.n	8003f2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	3324      	adds	r3, #36	@ 0x24
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fc43 	bl	80047b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f2e:	6978      	ldr	r0, [r7, #20]
 8003f30:	f7ff ff28 	bl	8003d84 <prvUnlockQueue>
	}
 8003f34:	bf00      	nop
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08e      	sub	sp, #56	@ 0x38
 8003f40:	af04      	add	r7, sp, #16
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	623b      	str	r3, [r7, #32]
}
 8003f62:	bf00      	nop
 8003f64:	bf00      	nop
 8003f66:	e7fd      	b.n	8003f64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10b      	bne.n	8003f86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	61fb      	str	r3, [r7, #28]
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	e7fd      	b.n	8003f82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f86:	235c      	movs	r3, #92	@ 0x5c
 8003f88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b5c      	cmp	r3, #92	@ 0x5c
 8003f8e:	d00b      	beq.n	8003fa8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	61bb      	str	r3, [r7, #24]
}
 8003fa2:	bf00      	nop
 8003fa4:	bf00      	nop
 8003fa6:	e7fd      	b.n	8003fa4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003fa8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01e      	beq.n	8003fee <xTaskCreateStatic+0xb2>
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01b      	beq.n	8003fee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003fc8:	2300      	movs	r3, #0
 8003fca:	9303      	str	r3, [sp, #12]
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	9302      	str	r3, [sp, #8]
 8003fd0:	f107 0314 	add.w	r3, r7, #20
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f850 	bl	8004086 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fe6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003fe8:	f000 f8de 	bl	80041a8 <prvAddNewTaskToReadyList>
 8003fec:	e001      	b.n	8003ff2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ff2:	697b      	ldr	r3, [r7, #20]
	}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3728      	adds	r7, #40	@ 0x28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08c      	sub	sp, #48	@ 0x30
 8004000:	af04      	add	r7, sp, #16
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800400c:	88fb      	ldrh	r3, [r7, #6]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4618      	mov	r0, r3
 8004012:	f001 fbe5 	bl	80057e0 <pvPortMalloc>
 8004016:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00e      	beq.n	800403c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800401e:	205c      	movs	r0, #92	@ 0x5c
 8004020:	f001 fbde 	bl	80057e0 <pvPortMalloc>
 8004024:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	631a      	str	r2, [r3, #48]	@ 0x30
 8004032:	e005      	b.n	8004040 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004034:	6978      	ldr	r0, [r7, #20]
 8004036:	f001 fca1 	bl	800597c <vPortFree>
 800403a:	e001      	b.n	8004040 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800403c:	2300      	movs	r3, #0
 800403e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d017      	beq.n	8004076 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800404e:	88fa      	ldrh	r2, [r7, #6]
 8004050:	2300      	movs	r3, #0
 8004052:	9303      	str	r3, [sp, #12]
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	9302      	str	r3, [sp, #8]
 8004058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800405a:	9301      	str	r3, [sp, #4]
 800405c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f80e 	bl	8004086 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800406a:	69f8      	ldr	r0, [r7, #28]
 800406c:	f000 f89c 	bl	80041a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004070:	2301      	movs	r3, #1
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	e002      	b.n	800407c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800407a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800407c:	69bb      	ldr	r3, [r7, #24]
	}
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b088      	sub	sp, #32
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
 8004092:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004096:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	461a      	mov	r2, r3
 800409e:	21a5      	movs	r1, #165	@ 0xa5
 80040a0:	f001 fd8a 	bl	8005bb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040ae:	3b01      	subs	r3, #1
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	f023 0307 	bic.w	r3, r3, #7
 80040bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00b      	beq.n	80040e0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80040c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	617b      	str	r3, [r7, #20]
}
 80040da:	bf00      	nop
 80040dc:	bf00      	nop
 80040de:	e7fd      	b.n	80040dc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01f      	beq.n	8004126 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
 80040ea:	e012      	b.n	8004112 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	4413      	add	r3, r2
 80040f2:	7819      	ldrb	r1, [r3, #0]
 80040f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	3334      	adds	r3, #52	@ 0x34
 80040fc:	460a      	mov	r2, r1
 80040fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	4413      	add	r3, r2
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d006      	beq.n	800411a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	3301      	adds	r3, #1
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	2b0f      	cmp	r3, #15
 8004116:	d9e9      	bls.n	80040ec <prvInitialiseNewTask+0x66>
 8004118:	e000      	b.n	800411c <prvInitialiseNewTask+0x96>
			{
				break;
 800411a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800411c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004124:	e003      	b.n	800412e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800412e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004130:	2b37      	cmp	r3, #55	@ 0x37
 8004132:	d901      	bls.n	8004138 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004134:	2337      	movs	r3, #55	@ 0x37
 8004136:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800413c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004142:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004146:	2200      	movs	r2, #0
 8004148:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800414a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414c:	3304      	adds	r3, #4
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff f96b 	bl	800342a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004156:	3318      	adds	r3, #24
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff f966 	bl	800342a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800415e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004162:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004166:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800416a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800416e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004172:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004176:	2200      	movs	r2, #0
 8004178:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	68f9      	ldr	r1, [r7, #12]
 8004186:	69b8      	ldr	r0, [r7, #24]
 8004188:	f001 f93a 	bl	8005400 <pxPortInitialiseStack>
 800418c:	4602      	mov	r2, r0
 800418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004190:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800419a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800419c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800419e:	bf00      	nop
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041b0:	f001 fa14 	bl	80055dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041b4:	4b2d      	ldr	r3, [pc, #180]	@ (800426c <prvAddNewTaskToReadyList+0xc4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3301      	adds	r3, #1
 80041ba:	4a2c      	ldr	r2, [pc, #176]	@ (800426c <prvAddNewTaskToReadyList+0xc4>)
 80041bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041be:	4b2c      	ldr	r3, [pc, #176]	@ (8004270 <prvAddNewTaskToReadyList+0xc8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004270 <prvAddNewTaskToReadyList+0xc8>)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041cc:	4b27      	ldr	r3, [pc, #156]	@ (800426c <prvAddNewTaskToReadyList+0xc4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d110      	bne.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041d4:	f000 fc1c 	bl	8004a10 <prvInitialiseTaskLists>
 80041d8:	e00d      	b.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041da:	4b26      	ldr	r3, [pc, #152]	@ (8004274 <prvAddNewTaskToReadyList+0xcc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041e2:	4b23      	ldr	r3, [pc, #140]	@ (8004270 <prvAddNewTaskToReadyList+0xc8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d802      	bhi.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004270 <prvAddNewTaskToReadyList+0xc8>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041f6:	4b20      	ldr	r3, [pc, #128]	@ (8004278 <prvAddNewTaskToReadyList+0xd0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004278 <prvAddNewTaskToReadyList+0xd0>)
 80041fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004200:	4b1d      	ldr	r3, [pc, #116]	@ (8004278 <prvAddNewTaskToReadyList+0xd0>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800420c:	4b1b      	ldr	r3, [pc, #108]	@ (800427c <prvAddNewTaskToReadyList+0xd4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d903      	bls.n	800421c <prvAddNewTaskToReadyList+0x74>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	4a18      	ldr	r2, [pc, #96]	@ (800427c <prvAddNewTaskToReadyList+0xd4>)
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4a15      	ldr	r2, [pc, #84]	@ (8004280 <prvAddNewTaskToReadyList+0xd8>)
 800422a:	441a      	add	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	4619      	mov	r1, r3
 8004232:	4610      	mov	r0, r2
 8004234:	f7ff f905 	bl	8003442 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004238:	f001 fa00 	bl	800563c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800423c:	4b0d      	ldr	r3, [pc, #52]	@ (8004274 <prvAddNewTaskToReadyList+0xcc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00e      	beq.n	8004262 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004244:	4b0a      	ldr	r3, [pc, #40]	@ (8004270 <prvAddNewTaskToReadyList+0xc8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424e:	429a      	cmp	r2, r3
 8004250:	d207      	bcs.n	8004262 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004252:	4b0c      	ldr	r3, [pc, #48]	@ (8004284 <prvAddNewTaskToReadyList+0xdc>)
 8004254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000cb4 	.word	0x20000cb4
 8004270:	200007e0 	.word	0x200007e0
 8004274:	20000cc0 	.word	0x20000cc0
 8004278:	20000cd0 	.word	0x20000cd0
 800427c:	20000cbc 	.word	0x20000cbc
 8004280:	200007e4 	.word	0x200007e4
 8004284:	e000ed04 	.word	0xe000ed04

08004288 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d018      	beq.n	80042cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800429a:	4b14      	ldr	r3, [pc, #80]	@ (80042ec <vTaskDelay+0x64>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00b      	beq.n	80042ba <vTaskDelay+0x32>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	60bb      	str	r3, [r7, #8]
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	e7fd      	b.n	80042b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042ba:	f000 f883 	bl	80043c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042be:	2100      	movs	r1, #0
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fcf1 	bl	8004ca8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042c6:	f000 f88b 	bl	80043e0 <xTaskResumeAll>
 80042ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d107      	bne.n	80042e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80042d2:	4b07      	ldr	r3, [pc, #28]	@ (80042f0 <vTaskDelay+0x68>)
 80042d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000cdc 	.word	0x20000cdc
 80042f0:	e000ed04 	.word	0xe000ed04

080042f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	@ 0x28
 80042f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004302:	463a      	mov	r2, r7
 8004304:	1d39      	adds	r1, r7, #4
 8004306:	f107 0308 	add.w	r3, r7, #8
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff f83c 	bl	8003388 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004310:	6839      	ldr	r1, [r7, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	9202      	str	r2, [sp, #8]
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	2300      	movs	r3, #0
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	2300      	movs	r3, #0
 8004320:	460a      	mov	r2, r1
 8004322:	4922      	ldr	r1, [pc, #136]	@ (80043ac <vTaskStartScheduler+0xb8>)
 8004324:	4822      	ldr	r0, [pc, #136]	@ (80043b0 <vTaskStartScheduler+0xbc>)
 8004326:	f7ff fe09 	bl	8003f3c <xTaskCreateStatic>
 800432a:	4603      	mov	r3, r0
 800432c:	4a21      	ldr	r2, [pc, #132]	@ (80043b4 <vTaskStartScheduler+0xc0>)
 800432e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004330:	4b20      	ldr	r3, [pc, #128]	@ (80043b4 <vTaskStartScheduler+0xc0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004338:	2301      	movs	r3, #1
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e001      	b.n	8004342 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d102      	bne.n	800434e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004348:	f000 fd02 	bl	8004d50 <xTimerCreateTimerTask>
 800434c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d116      	bne.n	8004382 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	613b      	str	r3, [r7, #16]
}
 8004366:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004368:	4b13      	ldr	r3, [pc, #76]	@ (80043b8 <vTaskStartScheduler+0xc4>)
 800436a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800436e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004370:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <vTaskStartScheduler+0xc8>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004376:	4b12      	ldr	r3, [pc, #72]	@ (80043c0 <vTaskStartScheduler+0xcc>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800437c:	f001 f8bc 	bl	80054f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004380:	e00f      	b.n	80043a2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004388:	d10b      	bne.n	80043a2 <vTaskStartScheduler+0xae>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	60fb      	str	r3, [r7, #12]
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	e7fd      	b.n	800439e <vTaskStartScheduler+0xaa>
}
 80043a2:	bf00      	nop
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	08005c50 	.word	0x08005c50
 80043b0:	080049e1 	.word	0x080049e1
 80043b4:	20000cd8 	.word	0x20000cd8
 80043b8:	20000cd4 	.word	0x20000cd4
 80043bc:	20000cc0 	.word	0x20000cc0
 80043c0:	20000cb8 	.word	0x20000cb8

080043c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80043c8:	4b04      	ldr	r3, [pc, #16]	@ (80043dc <vTaskSuspendAll+0x18>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3301      	adds	r3, #1
 80043ce:	4a03      	ldr	r2, [pc, #12]	@ (80043dc <vTaskSuspendAll+0x18>)
 80043d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043d2:	bf00      	nop
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000cdc 	.word	0x20000cdc

080043e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043ee:	4b42      	ldr	r3, [pc, #264]	@ (80044f8 <xTaskResumeAll+0x118>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10b      	bne.n	800440e <xTaskResumeAll+0x2e>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	603b      	str	r3, [r7, #0]
}
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	e7fd      	b.n	800440a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800440e:	f001 f8e5 	bl	80055dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004412:	4b39      	ldr	r3, [pc, #228]	@ (80044f8 <xTaskResumeAll+0x118>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3b01      	subs	r3, #1
 8004418:	4a37      	ldr	r2, [pc, #220]	@ (80044f8 <xTaskResumeAll+0x118>)
 800441a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800441c:	4b36      	ldr	r3, [pc, #216]	@ (80044f8 <xTaskResumeAll+0x118>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d162      	bne.n	80044ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004424:	4b35      	ldr	r3, [pc, #212]	@ (80044fc <xTaskResumeAll+0x11c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d05e      	beq.n	80044ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800442c:	e02f      	b.n	800448e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800442e:	4b34      	ldr	r3, [pc, #208]	@ (8004500 <xTaskResumeAll+0x120>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3318      	adds	r3, #24
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff f85c 	bl	80034f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3304      	adds	r3, #4
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff f857 	bl	80034f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800444e:	4b2d      	ldr	r3, [pc, #180]	@ (8004504 <xTaskResumeAll+0x124>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d903      	bls.n	800445e <xTaskResumeAll+0x7e>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445a:	4a2a      	ldr	r2, [pc, #168]	@ (8004504 <xTaskResumeAll+0x124>)
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4a27      	ldr	r2, [pc, #156]	@ (8004508 <xTaskResumeAll+0x128>)
 800446c:	441a      	add	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3304      	adds	r3, #4
 8004472:	4619      	mov	r1, r3
 8004474:	4610      	mov	r0, r2
 8004476:	f7fe ffe4 	bl	8003442 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800447e:	4b23      	ldr	r3, [pc, #140]	@ (800450c <xTaskResumeAll+0x12c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004484:	429a      	cmp	r2, r3
 8004486:	d302      	bcc.n	800448e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004488:	4b21      	ldr	r3, [pc, #132]	@ (8004510 <xTaskResumeAll+0x130>)
 800448a:	2201      	movs	r2, #1
 800448c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800448e:	4b1c      	ldr	r3, [pc, #112]	@ (8004500 <xTaskResumeAll+0x120>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1cb      	bne.n	800442e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800449c:	f000 fb56 	bl	8004b4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80044a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004514 <xTaskResumeAll+0x134>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d010      	beq.n	80044ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044ac:	f000 f844 	bl	8004538 <xTaskIncrementTick>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80044b6:	4b16      	ldr	r3, [pc, #88]	@ (8004510 <xTaskResumeAll+0x130>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3b01      	subs	r3, #1
 80044c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1f1      	bne.n	80044ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80044c8:	4b12      	ldr	r3, [pc, #72]	@ (8004514 <xTaskResumeAll+0x134>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044ce:	4b10      	ldr	r3, [pc, #64]	@ (8004510 <xTaskResumeAll+0x130>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044da:	4b0f      	ldr	r3, [pc, #60]	@ (8004518 <xTaskResumeAll+0x138>)
 80044dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044ea:	f001 f8a7 	bl	800563c <vPortExitCritical>

	return xAlreadyYielded;
 80044ee:	68bb      	ldr	r3, [r7, #8]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	20000cdc 	.word	0x20000cdc
 80044fc:	20000cb4 	.word	0x20000cb4
 8004500:	20000c74 	.word	0x20000c74
 8004504:	20000cbc 	.word	0x20000cbc
 8004508:	200007e4 	.word	0x200007e4
 800450c:	200007e0 	.word	0x200007e0
 8004510:	20000cc8 	.word	0x20000cc8
 8004514:	20000cc4 	.word	0x20000cc4
 8004518:	e000ed04 	.word	0xe000ed04

0800451c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004522:	4b04      	ldr	r3, [pc, #16]	@ (8004534 <xTaskGetTickCount+0x18>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004528:	687b      	ldr	r3, [r7, #4]
}
 800452a:	4618      	mov	r0, r3
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	20000cb8 	.word	0x20000cb8

08004538 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004542:	4b4f      	ldr	r3, [pc, #316]	@ (8004680 <xTaskIncrementTick+0x148>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f040 8090 	bne.w	800466c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800454c:	4b4d      	ldr	r3, [pc, #308]	@ (8004684 <xTaskIncrementTick+0x14c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3301      	adds	r3, #1
 8004552:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004554:	4a4b      	ldr	r2, [pc, #300]	@ (8004684 <xTaskIncrementTick+0x14c>)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d121      	bne.n	80045a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004560:	4b49      	ldr	r3, [pc, #292]	@ (8004688 <xTaskIncrementTick+0x150>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00b      	beq.n	8004582 <xTaskIncrementTick+0x4a>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	603b      	str	r3, [r7, #0]
}
 800457c:	bf00      	nop
 800457e:	bf00      	nop
 8004580:	e7fd      	b.n	800457e <xTaskIncrementTick+0x46>
 8004582:	4b41      	ldr	r3, [pc, #260]	@ (8004688 <xTaskIncrementTick+0x150>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	4b40      	ldr	r3, [pc, #256]	@ (800468c <xTaskIncrementTick+0x154>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a3e      	ldr	r2, [pc, #248]	@ (8004688 <xTaskIncrementTick+0x150>)
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4a3e      	ldr	r2, [pc, #248]	@ (800468c <xTaskIncrementTick+0x154>)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b3e      	ldr	r3, [pc, #248]	@ (8004690 <xTaskIncrementTick+0x158>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3301      	adds	r3, #1
 800459c:	4a3c      	ldr	r2, [pc, #240]	@ (8004690 <xTaskIncrementTick+0x158>)
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	f000 fad4 	bl	8004b4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004694 <xTaskIncrementTick+0x15c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d349      	bcc.n	8004642 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ae:	4b36      	ldr	r3, [pc, #216]	@ (8004688 <xTaskIncrementTick+0x150>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d104      	bne.n	80045c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045b8:	4b36      	ldr	r3, [pc, #216]	@ (8004694 <xTaskIncrementTick+0x15c>)
 80045ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045be:	601a      	str	r2, [r3, #0]
					break;
 80045c0:	e03f      	b.n	8004642 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c2:	4b31      	ldr	r3, [pc, #196]	@ (8004688 <xTaskIncrementTick+0x150>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d203      	bcs.n	80045e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045da:	4a2e      	ldr	r2, [pc, #184]	@ (8004694 <xTaskIncrementTick+0x15c>)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045e0:	e02f      	b.n	8004642 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe ff86 	bl	80034f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d004      	beq.n	80045fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	3318      	adds	r3, #24
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe ff7d 	bl	80034f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004602:	4b25      	ldr	r3, [pc, #148]	@ (8004698 <xTaskIncrementTick+0x160>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d903      	bls.n	8004612 <xTaskIncrementTick+0xda>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460e:	4a22      	ldr	r2, [pc, #136]	@ (8004698 <xTaskIncrementTick+0x160>)
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4a1f      	ldr	r2, [pc, #124]	@ (800469c <xTaskIncrementTick+0x164>)
 8004620:	441a      	add	r2, r3
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	3304      	adds	r3, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f7fe ff0a 	bl	8003442 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004632:	4b1b      	ldr	r3, [pc, #108]	@ (80046a0 <xTaskIncrementTick+0x168>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	429a      	cmp	r2, r3
 800463a:	d3b8      	bcc.n	80045ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800463c:	2301      	movs	r3, #1
 800463e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004640:	e7b5      	b.n	80045ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004642:	4b17      	ldr	r3, [pc, #92]	@ (80046a0 <xTaskIncrementTick+0x168>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004648:	4914      	ldr	r1, [pc, #80]	@ (800469c <xTaskIncrementTick+0x164>)
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d901      	bls.n	800465e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800465a:	2301      	movs	r3, #1
 800465c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800465e:	4b11      	ldr	r3, [pc, #68]	@ (80046a4 <xTaskIncrementTick+0x16c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004666:	2301      	movs	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e004      	b.n	8004676 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800466c:	4b0e      	ldr	r3, [pc, #56]	@ (80046a8 <xTaskIncrementTick+0x170>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3301      	adds	r3, #1
 8004672:	4a0d      	ldr	r2, [pc, #52]	@ (80046a8 <xTaskIncrementTick+0x170>)
 8004674:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004676:	697b      	ldr	r3, [r7, #20]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20000cdc 	.word	0x20000cdc
 8004684:	20000cb8 	.word	0x20000cb8
 8004688:	20000c6c 	.word	0x20000c6c
 800468c:	20000c70 	.word	0x20000c70
 8004690:	20000ccc 	.word	0x20000ccc
 8004694:	20000cd4 	.word	0x20000cd4
 8004698:	20000cbc 	.word	0x20000cbc
 800469c:	200007e4 	.word	0x200007e4
 80046a0:	200007e0 	.word	0x200007e0
 80046a4:	20000cc8 	.word	0x20000cc8
 80046a8:	20000cc4 	.word	0x20000cc4

080046ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046b2:	4b28      	ldr	r3, [pc, #160]	@ (8004754 <vTaskSwitchContext+0xa8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046ba:	4b27      	ldr	r3, [pc, #156]	@ (8004758 <vTaskSwitchContext+0xac>)
 80046bc:	2201      	movs	r2, #1
 80046be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046c0:	e042      	b.n	8004748 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80046c2:	4b25      	ldr	r3, [pc, #148]	@ (8004758 <vTaskSwitchContext+0xac>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c8:	4b24      	ldr	r3, [pc, #144]	@ (800475c <vTaskSwitchContext+0xb0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e011      	b.n	80046f4 <vTaskSwitchContext+0x48>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10b      	bne.n	80046ee <vTaskSwitchContext+0x42>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	607b      	str	r3, [r7, #4]
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	e7fd      	b.n	80046ea <vTaskSwitchContext+0x3e>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	491a      	ldr	r1, [pc, #104]	@ (8004760 <vTaskSwitchContext+0xb4>)
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0e3      	beq.n	80046d0 <vTaskSwitchContext+0x24>
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4a13      	ldr	r2, [pc, #76]	@ (8004760 <vTaskSwitchContext+0xb4>)
 8004714:	4413      	add	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	605a      	str	r2, [r3, #4]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	3308      	adds	r3, #8
 800472a:	429a      	cmp	r2, r3
 800472c:	d104      	bne.n	8004738 <vTaskSwitchContext+0x8c>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	605a      	str	r2, [r3, #4]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	4a09      	ldr	r2, [pc, #36]	@ (8004764 <vTaskSwitchContext+0xb8>)
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	4a06      	ldr	r2, [pc, #24]	@ (800475c <vTaskSwitchContext+0xb0>)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6013      	str	r3, [r2, #0]
}
 8004748:	bf00      	nop
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	bc80      	pop	{r7}
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000cdc 	.word	0x20000cdc
 8004758:	20000cc8 	.word	0x20000cc8
 800475c:	20000cbc 	.word	0x20000cbc
 8004760:	200007e4 	.word	0x200007e4
 8004764:	200007e0 	.word	0x200007e0

08004768 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10b      	bne.n	8004790 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	60fb      	str	r3, [r7, #12]
}
 800478a:	bf00      	nop
 800478c:	bf00      	nop
 800478e:	e7fd      	b.n	800478c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004790:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <vTaskPlaceOnEventList+0x48>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3318      	adds	r3, #24
 8004796:	4619      	mov	r1, r3
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7fe fe75 	bl	8003488 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800479e:	2101      	movs	r1, #1
 80047a0:	6838      	ldr	r0, [r7, #0]
 80047a2:	f000 fa81 	bl	8004ca8 <prvAddCurrentTaskToDelayedList>
}
 80047a6:	bf00      	nop
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	200007e0 	.word	0x200007e0

080047b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80047c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	617b      	str	r3, [r7, #20]
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	e7fd      	b.n	80047da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047de:	4b0a      	ldr	r3, [pc, #40]	@ (8004808 <vTaskPlaceOnEventListRestricted+0x54>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3318      	adds	r3, #24
 80047e4:	4619      	mov	r1, r3
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f7fe fe2b 	bl	8003442 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80047f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	68b8      	ldr	r0, [r7, #8]
 80047fc:	f000 fa54 	bl	8004ca8 <prvAddCurrentTaskToDelayedList>
	}
 8004800:	bf00      	nop
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	200007e0 	.word	0x200007e0

0800480c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10b      	bne.n	800483a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	60fb      	str	r3, [r7, #12]
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	e7fd      	b.n	8004836 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	3318      	adds	r3, #24
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe fe5a 	bl	80034f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004844:	4b1d      	ldr	r3, [pc, #116]	@ (80048bc <xTaskRemoveFromEventList+0xb0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d11d      	bne.n	8004888 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	3304      	adds	r3, #4
 8004850:	4618      	mov	r0, r3
 8004852:	f7fe fe51 	bl	80034f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485a:	4b19      	ldr	r3, [pc, #100]	@ (80048c0 <xTaskRemoveFromEventList+0xb4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d903      	bls.n	800486a <xTaskRemoveFromEventList+0x5e>
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004866:	4a16      	ldr	r2, [pc, #88]	@ (80048c0 <xTaskRemoveFromEventList+0xb4>)
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4a13      	ldr	r2, [pc, #76]	@ (80048c4 <xTaskRemoveFromEventList+0xb8>)
 8004878:	441a      	add	r2, r3
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	3304      	adds	r3, #4
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f7fe fdde 	bl	8003442 <vListInsertEnd>
 8004886:	e005      	b.n	8004894 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	3318      	adds	r3, #24
 800488c:	4619      	mov	r1, r3
 800488e:	480e      	ldr	r0, [pc, #56]	@ (80048c8 <xTaskRemoveFromEventList+0xbc>)
 8004890:	f7fe fdd7 	bl	8003442 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004898:	4b0c      	ldr	r3, [pc, #48]	@ (80048cc <xTaskRemoveFromEventList+0xc0>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489e:	429a      	cmp	r2, r3
 80048a0:	d905      	bls.n	80048ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048a2:	2301      	movs	r3, #1
 80048a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048a6:	4b0a      	ldr	r3, [pc, #40]	@ (80048d0 <xTaskRemoveFromEventList+0xc4>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e001      	b.n	80048b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80048b2:	697b      	ldr	r3, [r7, #20]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000cdc 	.word	0x20000cdc
 80048c0:	20000cbc 	.word	0x20000cbc
 80048c4:	200007e4 	.word	0x200007e4
 80048c8:	20000c74 	.word	0x20000c74
 80048cc:	200007e0 	.word	0x200007e0
 80048d0:	20000cc8 	.word	0x20000cc8

080048d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048dc:	4b06      	ldr	r3, [pc, #24]	@ (80048f8 <vTaskInternalSetTimeOutState+0x24>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048e4:	4b05      	ldr	r3, [pc, #20]	@ (80048fc <vTaskInternalSetTimeOutState+0x28>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	605a      	str	r2, [r3, #4]
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	20000ccc 	.word	0x20000ccc
 80048fc:	20000cb8 	.word	0x20000cb8

08004900 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	613b      	str	r3, [r7, #16]
}
 8004922:	bf00      	nop
 8004924:	bf00      	nop
 8004926:	e7fd      	b.n	8004924 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10b      	bne.n	8004946 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	60fb      	str	r3, [r7, #12]
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	e7fd      	b.n	8004942 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004946:	f000 fe49 	bl	80055dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800494a:	4b1d      	ldr	r3, [pc, #116]	@ (80049c0 <xTaskCheckForTimeOut+0xc0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004962:	d102      	bne.n	800496a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]
 8004968:	e023      	b.n	80049b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b15      	ldr	r3, [pc, #84]	@ (80049c4 <xTaskCheckForTimeOut+0xc4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d007      	beq.n	8004986 <xTaskCheckForTimeOut+0x86>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	429a      	cmp	r2, r3
 800497e:	d302      	bcc.n	8004986 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004980:	2301      	movs	r3, #1
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	e015      	b.n	80049b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	429a      	cmp	r2, r3
 800498e:	d20b      	bcs.n	80049a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	1ad2      	subs	r2, r2, r3
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff ff99 	bl	80048d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
 80049a6:	e004      	b.n	80049b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049ae:	2301      	movs	r3, #1
 80049b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049b2:	f000 fe43 	bl	800563c <vPortExitCritical>

	return xReturn;
 80049b6:	69fb      	ldr	r3, [r7, #28]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3720      	adds	r7, #32
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20000cb8 	.word	0x20000cb8
 80049c4:	20000ccc 	.word	0x20000ccc

080049c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049cc:	4b03      	ldr	r3, [pc, #12]	@ (80049dc <vTaskMissedYield+0x14>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
}
 80049d2:	bf00      	nop
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	20000cc8 	.word	0x20000cc8

080049e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049e8:	f000 f852 	bl	8004a90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049ec:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <prvIdleTask+0x28>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d9f9      	bls.n	80049e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049f4:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <prvIdleTask+0x2c>)
 80049f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a04:	e7f0      	b.n	80049e8 <prvIdleTask+0x8>
 8004a06:	bf00      	nop
 8004a08:	200007e4 	.word	0x200007e4
 8004a0c:	e000ed04 	.word	0xe000ed04

08004a10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a16:	2300      	movs	r3, #0
 8004a18:	607b      	str	r3, [r7, #4]
 8004a1a:	e00c      	b.n	8004a36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4a12      	ldr	r2, [pc, #72]	@ (8004a70 <prvInitialiseTaskLists+0x60>)
 8004a28:	4413      	add	r3, r2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe fcde 	bl	80033ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3301      	adds	r3, #1
 8004a34:	607b      	str	r3, [r7, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b37      	cmp	r3, #55	@ 0x37
 8004a3a:	d9ef      	bls.n	8004a1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a3c:	480d      	ldr	r0, [pc, #52]	@ (8004a74 <prvInitialiseTaskLists+0x64>)
 8004a3e:	f7fe fcd5 	bl	80033ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a42:	480d      	ldr	r0, [pc, #52]	@ (8004a78 <prvInitialiseTaskLists+0x68>)
 8004a44:	f7fe fcd2 	bl	80033ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a48:	480c      	ldr	r0, [pc, #48]	@ (8004a7c <prvInitialiseTaskLists+0x6c>)
 8004a4a:	f7fe fccf 	bl	80033ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a4e:	480c      	ldr	r0, [pc, #48]	@ (8004a80 <prvInitialiseTaskLists+0x70>)
 8004a50:	f7fe fccc 	bl	80033ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a54:	480b      	ldr	r0, [pc, #44]	@ (8004a84 <prvInitialiseTaskLists+0x74>)
 8004a56:	f7fe fcc9 	bl	80033ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <prvInitialiseTaskLists+0x78>)
 8004a5c:	4a05      	ldr	r2, [pc, #20]	@ (8004a74 <prvInitialiseTaskLists+0x64>)
 8004a5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a60:	4b0a      	ldr	r3, [pc, #40]	@ (8004a8c <prvInitialiseTaskLists+0x7c>)
 8004a62:	4a05      	ldr	r2, [pc, #20]	@ (8004a78 <prvInitialiseTaskLists+0x68>)
 8004a64:	601a      	str	r2, [r3, #0]
}
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	200007e4 	.word	0x200007e4
 8004a74:	20000c44 	.word	0x20000c44
 8004a78:	20000c58 	.word	0x20000c58
 8004a7c:	20000c74 	.word	0x20000c74
 8004a80:	20000c88 	.word	0x20000c88
 8004a84:	20000ca0 	.word	0x20000ca0
 8004a88:	20000c6c 	.word	0x20000c6c
 8004a8c:	20000c70 	.word	0x20000c70

08004a90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a96:	e019      	b.n	8004acc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a98:	f000 fda0 	bl	80055dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ae0 <prvCheckTasksWaitingTermination+0x50>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fe fd25 	bl	80034f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004aae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <prvCheckTasksWaitingTermination+0x54>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ae4 <prvCheckTasksWaitingTermination+0x54>)
 8004ab6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae8 <prvCheckTasksWaitingTermination+0x58>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae8 <prvCheckTasksWaitingTermination+0x58>)
 8004ac0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ac2:	f000 fdbb 	bl	800563c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f810 	bl	8004aec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004acc:	4b06      	ldr	r3, [pc, #24]	@ (8004ae8 <prvCheckTasksWaitingTermination+0x58>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e1      	bne.n	8004a98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000c88 	.word	0x20000c88
 8004ae4:	20000cb4 	.word	0x20000cb4
 8004ae8:	20000c9c 	.word	0x20000c9c

08004aec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d108      	bne.n	8004b10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 ff3a 	bl	800597c <vPortFree>
				vPortFree( pxTCB );
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 ff37 	bl	800597c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b0e:	e019      	b.n	8004b44 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d103      	bne.n	8004b22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 ff2e 	bl	800597c <vPortFree>
	}
 8004b20:	e010      	b.n	8004b44 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d00b      	beq.n	8004b44 <prvDeleteTCB+0x58>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	60fb      	str	r3, [r7, #12]
}
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
 8004b42:	e7fd      	b.n	8004b40 <prvDeleteTCB+0x54>
	}
 8004b44:	bf00      	nop
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b52:	4b0c      	ldr	r3, [pc, #48]	@ (8004b84 <prvResetNextTaskUnblockTime+0x38>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d104      	bne.n	8004b66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b88 <prvResetNextTaskUnblockTime+0x3c>)
 8004b5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b64:	e008      	b.n	8004b78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b66:	4b07      	ldr	r3, [pc, #28]	@ (8004b84 <prvResetNextTaskUnblockTime+0x38>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a04      	ldr	r2, [pc, #16]	@ (8004b88 <prvResetNextTaskUnblockTime+0x3c>)
 8004b76:	6013      	str	r3, [r2, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000c6c 	.word	0x20000c6c
 8004b88:	20000cd4 	.word	0x20000cd4

08004b8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b92:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc0 <xTaskGetSchedulerState+0x34>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d102      	bne.n	8004ba0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	e008      	b.n	8004bb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba0:	4b08      	ldr	r3, [pc, #32]	@ (8004bc4 <xTaskGetSchedulerState+0x38>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d102      	bne.n	8004bae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ba8:	2302      	movs	r3, #2
 8004baa:	607b      	str	r3, [r7, #4]
 8004bac:	e001      	b.n	8004bb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004bb2:	687b      	ldr	r3, [r7, #4]
	}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bc80      	pop	{r7}
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20000cc0 	.word	0x20000cc0
 8004bc4:	20000cdc 	.word	0x20000cdc

08004bc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d058      	beq.n	8004c90 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bde:	4b2f      	ldr	r3, [pc, #188]	@ (8004c9c <xTaskPriorityDisinherit+0xd4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d00b      	beq.n	8004c00 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	60fb      	str	r3, [r7, #12]
}
 8004bfa:	bf00      	nop
 8004bfc:	bf00      	nop
 8004bfe:	e7fd      	b.n	8004bfc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10b      	bne.n	8004c20 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	60bb      	str	r3, [r7, #8]
}
 8004c1a:	bf00      	nop
 8004c1c:	bf00      	nop
 8004c1e:	e7fd      	b.n	8004c1c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c24:	1e5a      	subs	r2, r3, #1
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d02c      	beq.n	8004c90 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d128      	bne.n	8004c90 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	3304      	adds	r3, #4
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe fc58 	bl	80034f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c54:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c60:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca0 <xTaskPriorityDisinherit+0xd8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d903      	bls.n	8004c70 <xTaskPriorityDisinherit+0xa8>
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8004ca0 <xTaskPriorityDisinherit+0xd8>)
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4a09      	ldr	r2, [pc, #36]	@ (8004ca4 <xTaskPriorityDisinherit+0xdc>)
 8004c7e:	441a      	add	r2, r3
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f7fe fbdb 	bl	8003442 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c90:	697b      	ldr	r3, [r7, #20]
	}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	200007e0 	.word	0x200007e0
 8004ca0:	20000cbc 	.word	0x20000cbc
 8004ca4:	200007e4 	.word	0x200007e4

08004ca8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cb2:	4b21      	ldr	r3, [pc, #132]	@ (8004d38 <prvAddCurrentTaskToDelayedList+0x90>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cb8:	4b20      	ldr	r3, [pc, #128]	@ (8004d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe fc1a 	bl	80034f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cca:	d10a      	bne.n	8004ce2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8004d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4819      	ldr	r0, [pc, #100]	@ (8004d40 <prvAddCurrentTaskToDelayedList+0x98>)
 8004cdc:	f7fe fbb1 	bl	8003442 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ce0:	e026      	b.n	8004d30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cea:	4b14      	ldr	r3, [pc, #80]	@ (8004d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d209      	bcs.n	8004d0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cfa:	4b12      	ldr	r3, [pc, #72]	@ (8004d44 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8004d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f7fe fbbe 	bl	8003488 <vListInsert>
}
 8004d0c:	e010      	b.n	8004d30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004d48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4b0a      	ldr	r3, [pc, #40]	@ (8004d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f7fe fbb4 	bl	8003488 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d20:	4b0a      	ldr	r3, [pc, #40]	@ (8004d4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d202      	bcs.n	8004d30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d2a:	4a08      	ldr	r2, [pc, #32]	@ (8004d4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	6013      	str	r3, [r2, #0]
}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20000cb8 	.word	0x20000cb8
 8004d3c:	200007e0 	.word	0x200007e0
 8004d40:	20000ca0 	.word	0x20000ca0
 8004d44:	20000c70 	.word	0x20000c70
 8004d48:	20000c6c 	.word	0x20000c6c
 8004d4c:	20000cd4 	.word	0x20000cd4

08004d50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08a      	sub	sp, #40	@ 0x28
 8004d54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d5a:	f000 fb11 	bl	8005380 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd4 <xTimerCreateTimerTask+0x84>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d021      	beq.n	8004daa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d6e:	1d3a      	adds	r2, r7, #4
 8004d70:	f107 0108 	add.w	r1, r7, #8
 8004d74:	f107 030c 	add.w	r3, r7, #12
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fe fb1d 	bl	80033b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	9202      	str	r2, [sp, #8]
 8004d86:	9301      	str	r3, [sp, #4]
 8004d88:	2302      	movs	r3, #2
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	460a      	mov	r2, r1
 8004d90:	4911      	ldr	r1, [pc, #68]	@ (8004dd8 <xTimerCreateTimerTask+0x88>)
 8004d92:	4812      	ldr	r0, [pc, #72]	@ (8004ddc <xTimerCreateTimerTask+0x8c>)
 8004d94:	f7ff f8d2 	bl	8003f3c <xTaskCreateStatic>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	4a11      	ldr	r2, [pc, #68]	@ (8004de0 <xTimerCreateTimerTask+0x90>)
 8004d9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d9e:	4b10      	ldr	r3, [pc, #64]	@ (8004de0 <xTimerCreateTimerTask+0x90>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004da6:	2301      	movs	r3, #1
 8004da8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10b      	bne.n	8004dc8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	613b      	str	r3, [r7, #16]
}
 8004dc2:	bf00      	nop
 8004dc4:	bf00      	nop
 8004dc6:	e7fd      	b.n	8004dc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004dc8:	697b      	ldr	r3, [r7, #20]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000d10 	.word	0x20000d10
 8004dd8:	08005c58 	.word	0x08005c58
 8004ddc:	08004f1d 	.word	0x08004f1d
 8004de0:	20000d14 	.word	0x20000d14

08004de4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	@ 0x28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10b      	bne.n	8004e14 <xTimerGenericCommand+0x30>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	623b      	str	r3, [r7, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	bf00      	nop
 8004e12:	e7fd      	b.n	8004e10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e14:	4b19      	ldr	r3, [pc, #100]	@ (8004e7c <xTimerGenericCommand+0x98>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d02a      	beq.n	8004e72 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b05      	cmp	r3, #5
 8004e2c:	dc18      	bgt.n	8004e60 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e2e:	f7ff fead 	bl	8004b8c <xTaskGetSchedulerState>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d109      	bne.n	8004e4c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e38:	4b10      	ldr	r3, [pc, #64]	@ (8004e7c <xTimerGenericCommand+0x98>)
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	f107 0110 	add.w	r1, r7, #16
 8004e40:	2300      	movs	r3, #0
 8004e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e44:	f7fe fc8c 	bl	8003760 <xQueueGenericSend>
 8004e48:	6278      	str	r0, [r7, #36]	@ 0x24
 8004e4a:	e012      	b.n	8004e72 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e7c <xTimerGenericCommand+0x98>)
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	f107 0110 	add.w	r1, r7, #16
 8004e54:	2300      	movs	r3, #0
 8004e56:	2200      	movs	r2, #0
 8004e58:	f7fe fc82 	bl	8003760 <xQueueGenericSend>
 8004e5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004e5e:	e008      	b.n	8004e72 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e60:	4b06      	ldr	r3, [pc, #24]	@ (8004e7c <xTimerGenericCommand+0x98>)
 8004e62:	6818      	ldr	r0, [r3, #0]
 8004e64:	f107 0110 	add.w	r1, r7, #16
 8004e68:	2300      	movs	r3, #0
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	f7fe fd7a 	bl	8003964 <xQueueGenericSendFromISR>
 8004e70:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3728      	adds	r7, #40	@ 0x28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20000d10 	.word	0x20000d10

08004e80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e8a:	4b23      	ldr	r3, [pc, #140]	@ (8004f18 <prvProcessExpiredTimer+0x98>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	3304      	adds	r3, #4
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fe fb2d 	bl	80034f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d023      	beq.n	8004ef4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	18d1      	adds	r1, r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	6978      	ldr	r0, [r7, #20]
 8004eba:	f000 f8d3 	bl	8005064 <prvInsertTimerInActiveList>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d020      	beq.n	8004f06 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	2100      	movs	r1, #0
 8004ece:	6978      	ldr	r0, [r7, #20]
 8004ed0:	f7ff ff88 	bl	8004de4 <xTimerGenericCommand>
 8004ed4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d114      	bne.n	8004f06 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	60fb      	str	r3, [r7, #12]
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	6978      	ldr	r0, [r7, #20]
 8004f0c:	4798      	blx	r3
}
 8004f0e:	bf00      	nop
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000d08 	.word	0x20000d08

08004f1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f24:	f107 0308 	add.w	r3, r7, #8
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 f859 	bl	8004fe0 <prvGetNextExpireTime>
 8004f2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4619      	mov	r1, r3
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f805 	bl	8004f44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f3a:	f000 f8d5 	bl	80050e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f3e:	bf00      	nop
 8004f40:	e7f0      	b.n	8004f24 <prvTimerTask+0x8>
	...

08004f44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f4e:	f7ff fa39 	bl	80043c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f52:	f107 0308 	add.w	r3, r7, #8
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f864 	bl	8005024 <prvSampleTimeNow>
 8004f5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d130      	bne.n	8004fc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10a      	bne.n	8004f80 <prvProcessTimerOrBlockTask+0x3c>
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d806      	bhi.n	8004f80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f72:	f7ff fa35 	bl	80043e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7ff ff81 	bl	8004e80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f7e:	e024      	b.n	8004fca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f86:	4b13      	ldr	r3, [pc, #76]	@ (8004fd4 <prvProcessTimerOrBlockTask+0x90>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <prvProcessTimerOrBlockTask+0x50>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <prvProcessTimerOrBlockTask+0x52>
 8004f94:	2300      	movs	r3, #0
 8004f96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f98:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd8 <prvProcessTimerOrBlockTask+0x94>)
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f7fe ff95 	bl	8003ed4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004faa:	f7ff fa19 	bl	80043e0 <xTaskResumeAll>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10a      	bne.n	8004fca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004fb4:	4b09      	ldr	r3, [pc, #36]	@ (8004fdc <prvProcessTimerOrBlockTask+0x98>)
 8004fb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	f3bf 8f6f 	isb	sy
}
 8004fc4:	e001      	b.n	8004fca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004fc6:	f7ff fa0b 	bl	80043e0 <xTaskResumeAll>
}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20000d0c 	.word	0x20000d0c
 8004fd8:	20000d10 	.word	0x20000d10
 8004fdc:	e000ed04 	.word	0xe000ed04

08004fe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8005020 <prvGetNextExpireTime+0x40>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <prvGetNextExpireTime+0x16>
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	e000      	b.n	8004ff8 <prvGetNextExpireTime+0x18>
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d105      	bne.n	8005010 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005004:	4b06      	ldr	r3, [pc, #24]	@ (8005020 <prvGetNextExpireTime+0x40>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	e001      	b.n	8005014 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005014:	68fb      	ldr	r3, [r7, #12]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr
 8005020:	20000d08 	.word	0x20000d08

08005024 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800502c:	f7ff fa76 	bl	800451c <xTaskGetTickCount>
 8005030:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005032:	4b0b      	ldr	r3, [pc, #44]	@ (8005060 <prvSampleTimeNow+0x3c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	429a      	cmp	r2, r3
 800503a:	d205      	bcs.n	8005048 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800503c:	f000 f93a 	bl	80052b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	e002      	b.n	800504e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800504e:	4a04      	ldr	r2, [pc, #16]	@ (8005060 <prvSampleTimeNow+0x3c>)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005054:	68fb      	ldr	r3, [r7, #12]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000d18 	.word	0x20000d18

08005064 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d812      	bhi.n	80050b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	1ad2      	subs	r2, r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	429a      	cmp	r2, r3
 8005096:	d302      	bcc.n	800509e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005098:	2301      	movs	r3, #1
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	e01b      	b.n	80050d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800509e:	4b10      	ldr	r3, [pc, #64]	@ (80050e0 <prvInsertTimerInActiveList+0x7c>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3304      	adds	r3, #4
 80050a6:	4619      	mov	r1, r3
 80050a8:	4610      	mov	r0, r2
 80050aa:	f7fe f9ed 	bl	8003488 <vListInsert>
 80050ae:	e012      	b.n	80050d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d206      	bcs.n	80050c6 <prvInsertTimerInActiveList+0x62>
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d302      	bcc.n	80050c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	e007      	b.n	80050d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050c6:	4b07      	ldr	r3, [pc, #28]	@ (80050e4 <prvInsertTimerInActiveList+0x80>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f7fe f9d9 	bl	8003488 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050d6:	697b      	ldr	r3, [r7, #20]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000d0c 	.word	0x20000d0c
 80050e4:	20000d08 	.word	0x20000d08

080050e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08e      	sub	sp, #56	@ 0x38
 80050ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050ee:	e0ce      	b.n	800528e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	da19      	bge.n	800512a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050f6:	1d3b      	adds	r3, r7, #4
 80050f8:	3304      	adds	r3, #4
 80050fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10b      	bne.n	800511a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	61fb      	str	r3, [r7, #28]
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	e7fd      	b.n	8005116 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800511a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005120:	6850      	ldr	r0, [r2, #4]
 8005122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005124:	6892      	ldr	r2, [r2, #8]
 8005126:	4611      	mov	r1, r2
 8005128:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f2c0 80ae 	blt.w	800528e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800513e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005140:	3304      	adds	r3, #4
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe f9d8 	bl	80034f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005148:	463b      	mov	r3, r7
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff ff6a 	bl	8005024 <prvSampleTimeNow>
 8005150:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b09      	cmp	r3, #9
 8005156:	f200 8097 	bhi.w	8005288 <prvProcessReceivedCommands+0x1a0>
 800515a:	a201      	add	r2, pc, #4	@ (adr r2, 8005160 <prvProcessReceivedCommands+0x78>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	08005189 	.word	0x08005189
 8005164:	08005189 	.word	0x08005189
 8005168:	08005189 	.word	0x08005189
 800516c:	080051ff 	.word	0x080051ff
 8005170:	08005213 	.word	0x08005213
 8005174:	0800525f 	.word	0x0800525f
 8005178:	08005189 	.word	0x08005189
 800517c:	08005189 	.word	0x08005189
 8005180:	080051ff 	.word	0x080051ff
 8005184:	08005213 	.word	0x08005213
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800518e:	f043 0301 	orr.w	r3, r3, #1
 8005192:	b2da      	uxtb	r2, r3
 8005194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005196:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	18d1      	adds	r1, r2, r3
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051a8:	f7ff ff5c 	bl	8005064 <prvInsertTimerInActiveList>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d06c      	beq.n	800528c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d061      	beq.n	800528c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	441a      	add	r2, r3
 80051d0:	2300      	movs	r3, #0
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	2300      	movs	r3, #0
 80051d6:	2100      	movs	r1, #0
 80051d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051da:	f7ff fe03 	bl	8004de4 <xTimerGenericCommand>
 80051de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d152      	bne.n	800528c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	61bb      	str	r3, [r7, #24]
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	e7fd      	b.n	80051fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005200:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	b2da      	uxtb	r2, r3
 800520a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005210:	e03d      	b.n	800528e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005218:	f043 0301 	orr.w	r3, r3, #1
 800521c:	b2da      	uxtb	r2, r3
 800521e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005220:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005228:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800522a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10b      	bne.n	800524a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	617b      	str	r3, [r7, #20]
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop
 8005248:	e7fd      	b.n	8005246 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800524a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	18d1      	adds	r1, r2, r3
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005258:	f7ff ff04 	bl	8005064 <prvInsertTimerInActiveList>
					break;
 800525c:	e017      	b.n	800528e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800525e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005260:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d103      	bne.n	8005274 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800526c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800526e:	f000 fb85 	bl	800597c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005272:	e00c      	b.n	800528e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005276:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	b2da      	uxtb	r2, r3
 8005280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005282:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005286:	e002      	b.n	800528e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005288:	bf00      	nop
 800528a:	e000      	b.n	800528e <prvProcessReceivedCommands+0x1a6>
					break;
 800528c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800528e:	4b08      	ldr	r3, [pc, #32]	@ (80052b0 <prvProcessReceivedCommands+0x1c8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	1d39      	adds	r1, r7, #4
 8005294:	2200      	movs	r2, #0
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fc02 	bl	8003aa0 <xQueueReceive>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f47f af26 	bne.w	80050f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop
 80052a8:	3730      	adds	r7, #48	@ 0x30
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20000d10 	.word	0x20000d10

080052b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052ba:	e049      	b.n	8005350 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005378 <prvSwitchTimerLists+0xc4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005378 <prvSwitchTimerLists+0xc4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe f90f 	bl	80034f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d02f      	beq.n	8005350 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4413      	add	r3, r2
 80052f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d90e      	bls.n	8005320 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800530e:	4b1a      	ldr	r3, [pc, #104]	@ (8005378 <prvSwitchTimerLists+0xc4>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3304      	adds	r3, #4
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f7fe f8b5 	bl	8003488 <vListInsert>
 800531e:	e017      	b.n	8005350 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005320:	2300      	movs	r3, #0
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	2300      	movs	r3, #0
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	2100      	movs	r1, #0
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f7ff fd5a 	bl	8004de4 <xTimerGenericCommand>
 8005330:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10b      	bne.n	8005350 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	603b      	str	r3, [r7, #0]
}
 800534a:	bf00      	nop
 800534c:	bf00      	nop
 800534e:	e7fd      	b.n	800534c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005350:	4b09      	ldr	r3, [pc, #36]	@ (8005378 <prvSwitchTimerLists+0xc4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1b0      	bne.n	80052bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800535a:	4b07      	ldr	r3, [pc, #28]	@ (8005378 <prvSwitchTimerLists+0xc4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005360:	4b06      	ldr	r3, [pc, #24]	@ (800537c <prvSwitchTimerLists+0xc8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a04      	ldr	r2, [pc, #16]	@ (8005378 <prvSwitchTimerLists+0xc4>)
 8005366:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005368:	4a04      	ldr	r2, [pc, #16]	@ (800537c <prvSwitchTimerLists+0xc8>)
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	6013      	str	r3, [r2, #0]
}
 800536e:	bf00      	nop
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000d08 	.word	0x20000d08
 800537c:	20000d0c 	.word	0x20000d0c

08005380 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005386:	f000 f929 	bl	80055dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800538a:	4b15      	ldr	r3, [pc, #84]	@ (80053e0 <prvCheckForValidListAndQueue+0x60>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d120      	bne.n	80053d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005392:	4814      	ldr	r0, [pc, #80]	@ (80053e4 <prvCheckForValidListAndQueue+0x64>)
 8005394:	f7fe f82a 	bl	80033ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005398:	4813      	ldr	r0, [pc, #76]	@ (80053e8 <prvCheckForValidListAndQueue+0x68>)
 800539a:	f7fe f827 	bl	80033ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800539e:	4b13      	ldr	r3, [pc, #76]	@ (80053ec <prvCheckForValidListAndQueue+0x6c>)
 80053a0:	4a10      	ldr	r2, [pc, #64]	@ (80053e4 <prvCheckForValidListAndQueue+0x64>)
 80053a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80053a4:	4b12      	ldr	r3, [pc, #72]	@ (80053f0 <prvCheckForValidListAndQueue+0x70>)
 80053a6:	4a10      	ldr	r2, [pc, #64]	@ (80053e8 <prvCheckForValidListAndQueue+0x68>)
 80053a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80053aa:	2300      	movs	r3, #0
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	4b11      	ldr	r3, [pc, #68]	@ (80053f4 <prvCheckForValidListAndQueue+0x74>)
 80053b0:	4a11      	ldr	r2, [pc, #68]	@ (80053f8 <prvCheckForValidListAndQueue+0x78>)
 80053b2:	2110      	movs	r1, #16
 80053b4:	200a      	movs	r0, #10
 80053b6:	f7fe f933 	bl	8003620 <xQueueGenericCreateStatic>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4a08      	ldr	r2, [pc, #32]	@ (80053e0 <prvCheckForValidListAndQueue+0x60>)
 80053be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80053c0:	4b07      	ldr	r3, [pc, #28]	@ (80053e0 <prvCheckForValidListAndQueue+0x60>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80053c8:	4b05      	ldr	r3, [pc, #20]	@ (80053e0 <prvCheckForValidListAndQueue+0x60>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	490b      	ldr	r1, [pc, #44]	@ (80053fc <prvCheckForValidListAndQueue+0x7c>)
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe fd58 	bl	8003e84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053d4:	f000 f932 	bl	800563c <vPortExitCritical>
}
 80053d8:	bf00      	nop
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000d10 	.word	0x20000d10
 80053e4:	20000ce0 	.word	0x20000ce0
 80053e8:	20000cf4 	.word	0x20000cf4
 80053ec:	20000d08 	.word	0x20000d08
 80053f0:	20000d0c 	.word	0x20000d0c
 80053f4:	20000dbc 	.word	0x20000dbc
 80053f8:	20000d1c 	.word	0x20000d1c
 80053fc:	08005c60 	.word	0x08005c60

08005400 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3b04      	subs	r3, #4
 8005410:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3b04      	subs	r3, #4
 800541e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f023 0201 	bic.w	r2, r3, #1
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3b04      	subs	r3, #4
 800542e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005430:	4a08      	ldr	r2, [pc, #32]	@ (8005454 <pxPortInitialiseStack+0x54>)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3b14      	subs	r3, #20
 800543a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3b20      	subs	r3, #32
 8005446:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005448:	68fb      	ldr	r3, [r7, #12]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr
 8005454:	08005459 	.word	0x08005459

08005458 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800545e:	2300      	movs	r3, #0
 8005460:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005462:	4b12      	ldr	r3, [pc, #72]	@ (80054ac <prvTaskExitError+0x54>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800546a:	d00b      	beq.n	8005484 <prvTaskExitError+0x2c>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	60fb      	str	r3, [r7, #12]
}
 800547e:	bf00      	nop
 8005480:	bf00      	nop
 8005482:	e7fd      	b.n	8005480 <prvTaskExitError+0x28>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	60bb      	str	r3, [r7, #8]
}
 8005496:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005498:	bf00      	nop
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0fc      	beq.n	800549a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80054a0:	bf00      	nop
 80054a2:	bf00      	nop
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr
 80054ac:	2000000c 	.word	0x2000000c

080054b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054b0:	4b07      	ldr	r3, [pc, #28]	@ (80054d0 <pxCurrentTCBConst2>)
 80054b2:	6819      	ldr	r1, [r3, #0]
 80054b4:	6808      	ldr	r0, [r1, #0]
 80054b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054ba:	f380 8809 	msr	PSP, r0
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f04f 0000 	mov.w	r0, #0
 80054c6:	f380 8811 	msr	BASEPRI, r0
 80054ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80054ce:	4770      	bx	lr

080054d0 <pxCurrentTCBConst2>:
 80054d0:	200007e0 	.word	0x200007e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop

080054d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80054d8:	4806      	ldr	r0, [pc, #24]	@ (80054f4 <prvPortStartFirstTask+0x1c>)
 80054da:	6800      	ldr	r0, [r0, #0]
 80054dc:	6800      	ldr	r0, [r0, #0]
 80054de:	f380 8808 	msr	MSP, r0
 80054e2:	b662      	cpsie	i
 80054e4:	b661      	cpsie	f
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	df00      	svc	0
 80054f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054f2:	bf00      	nop
 80054f4:	e000ed08 	.word	0xe000ed08

080054f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054fe:	4b32      	ldr	r3, [pc, #200]	@ (80055c8 <xPortStartScheduler+0xd0>)
 8005500:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	22ff      	movs	r2, #255	@ 0xff
 800550e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005520:	b2da      	uxtb	r2, r3
 8005522:	4b2a      	ldr	r3, [pc, #168]	@ (80055cc <xPortStartScheduler+0xd4>)
 8005524:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005526:	4b2a      	ldr	r3, [pc, #168]	@ (80055d0 <xPortStartScheduler+0xd8>)
 8005528:	2207      	movs	r2, #7
 800552a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800552c:	e009      	b.n	8005542 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800552e:	4b28      	ldr	r3, [pc, #160]	@ (80055d0 <xPortStartScheduler+0xd8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3b01      	subs	r3, #1
 8005534:	4a26      	ldr	r2, [pc, #152]	@ (80055d0 <xPortStartScheduler+0xd8>)
 8005536:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	b2db      	uxtb	r3, r3
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	b2db      	uxtb	r3, r3
 8005540:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800554a:	2b80      	cmp	r3, #128	@ 0x80
 800554c:	d0ef      	beq.n	800552e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800554e:	4b20      	ldr	r3, [pc, #128]	@ (80055d0 <xPortStartScheduler+0xd8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f1c3 0307 	rsb	r3, r3, #7
 8005556:	2b04      	cmp	r3, #4
 8005558:	d00b      	beq.n	8005572 <xPortStartScheduler+0x7a>
	__asm volatile
 800555a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	60bb      	str	r3, [r7, #8]
}
 800556c:	bf00      	nop
 800556e:	bf00      	nop
 8005570:	e7fd      	b.n	800556e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005572:	4b17      	ldr	r3, [pc, #92]	@ (80055d0 <xPortStartScheduler+0xd8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	021b      	lsls	r3, r3, #8
 8005578:	4a15      	ldr	r2, [pc, #84]	@ (80055d0 <xPortStartScheduler+0xd8>)
 800557a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800557c:	4b14      	ldr	r3, [pc, #80]	@ (80055d0 <xPortStartScheduler+0xd8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005584:	4a12      	ldr	r2, [pc, #72]	@ (80055d0 <xPortStartScheduler+0xd8>)
 8005586:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	b2da      	uxtb	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005590:	4b10      	ldr	r3, [pc, #64]	@ (80055d4 <xPortStartScheduler+0xdc>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a0f      	ldr	r2, [pc, #60]	@ (80055d4 <xPortStartScheduler+0xdc>)
 8005596:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800559a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800559c:	4b0d      	ldr	r3, [pc, #52]	@ (80055d4 <xPortStartScheduler+0xdc>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a0c      	ldr	r2, [pc, #48]	@ (80055d4 <xPortStartScheduler+0xdc>)
 80055a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80055a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055a8:	f000 f8b8 	bl	800571c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055ac:	4b0a      	ldr	r3, [pc, #40]	@ (80055d8 <xPortStartScheduler+0xe0>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055b2:	f7ff ff91 	bl	80054d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055b6:	f7ff f879 	bl	80046ac <vTaskSwitchContext>
	prvTaskExitError();
 80055ba:	f7ff ff4d 	bl	8005458 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	e000e400 	.word	0xe000e400
 80055cc:	20000e0c 	.word	0x20000e0c
 80055d0:	20000e10 	.word	0x20000e10
 80055d4:	e000ed20 	.word	0xe000ed20
 80055d8:	2000000c 	.word	0x2000000c

080055dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	607b      	str	r3, [r7, #4]
}
 80055f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005634 <vPortEnterCritical+0x58>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3301      	adds	r3, #1
 80055fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005634 <vPortEnterCritical+0x58>)
 80055fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005600:	4b0c      	ldr	r3, [pc, #48]	@ (8005634 <vPortEnterCritical+0x58>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d110      	bne.n	800562a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005608:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <vPortEnterCritical+0x5c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00b      	beq.n	800562a <vPortEnterCritical+0x4e>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	603b      	str	r3, [r7, #0]
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	e7fd      	b.n	8005626 <vPortEnterCritical+0x4a>
	}
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr
 8005634:	2000000c 	.word	0x2000000c
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005642:	4b12      	ldr	r3, [pc, #72]	@ (800568c <vPortExitCritical+0x50>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10b      	bne.n	8005662 <vPortExitCritical+0x26>
	__asm volatile
 800564a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	607b      	str	r3, [r7, #4]
}
 800565c:	bf00      	nop
 800565e:	bf00      	nop
 8005660:	e7fd      	b.n	800565e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005662:	4b0a      	ldr	r3, [pc, #40]	@ (800568c <vPortExitCritical+0x50>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3b01      	subs	r3, #1
 8005668:	4a08      	ldr	r2, [pc, #32]	@ (800568c <vPortExitCritical+0x50>)
 800566a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800566c:	4b07      	ldr	r3, [pc, #28]	@ (800568c <vPortExitCritical+0x50>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d105      	bne.n	8005680 <vPortExitCritical+0x44>
 8005674:	2300      	movs	r3, #0
 8005676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	f383 8811 	msr	BASEPRI, r3
}
 800567e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	2000000c 	.word	0x2000000c

08005690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005690:	f3ef 8009 	mrs	r0, PSP
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	4b0d      	ldr	r3, [pc, #52]	@ (80056d0 <pxCurrentTCBConst>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056a0:	6010      	str	r0, [r2, #0]
 80056a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80056a6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80056aa:	f380 8811 	msr	BASEPRI, r0
 80056ae:	f7fe fffd 	bl	80046ac <vTaskSwitchContext>
 80056b2:	f04f 0000 	mov.w	r0, #0
 80056b6:	f380 8811 	msr	BASEPRI, r0
 80056ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80056be:	6819      	ldr	r1, [r3, #0]
 80056c0:	6808      	ldr	r0, [r1, #0]
 80056c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056c6:	f380 8809 	msr	PSP, r0
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	4770      	bx	lr

080056d0 <pxCurrentTCBConst>:
 80056d0:	200007e0 	.word	0x200007e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop

080056d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	607b      	str	r3, [r7, #4]
}
 80056f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056f2:	f7fe ff21 	bl	8004538 <xTaskIncrementTick>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056fc:	4b06      	ldr	r3, [pc, #24]	@ (8005718 <xPortSysTickHandler+0x40>)
 80056fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	2300      	movs	r3, #0
 8005706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	f383 8811 	msr	BASEPRI, r3
}
 800570e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005710:	bf00      	nop
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	e000ed04 	.word	0xe000ed04

0800571c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005720:	4b0a      	ldr	r3, [pc, #40]	@ (800574c <vPortSetupTimerInterrupt+0x30>)
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005726:	4b0a      	ldr	r3, [pc, #40]	@ (8005750 <vPortSetupTimerInterrupt+0x34>)
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800572c:	4b09      	ldr	r3, [pc, #36]	@ (8005754 <vPortSetupTimerInterrupt+0x38>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a09      	ldr	r2, [pc, #36]	@ (8005758 <vPortSetupTimerInterrupt+0x3c>)
 8005732:	fba2 2303 	umull	r2, r3, r2, r3
 8005736:	099b      	lsrs	r3, r3, #6
 8005738:	4a08      	ldr	r2, [pc, #32]	@ (800575c <vPortSetupTimerInterrupt+0x40>)
 800573a:	3b01      	subs	r3, #1
 800573c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800573e:	4b03      	ldr	r3, [pc, #12]	@ (800574c <vPortSetupTimerInterrupt+0x30>)
 8005740:	2207      	movs	r2, #7
 8005742:	601a      	str	r2, [r3, #0]
}
 8005744:	bf00      	nop
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr
 800574c:	e000e010 	.word	0xe000e010
 8005750:	e000e018 	.word	0xe000e018
 8005754:	20000000 	.word	0x20000000
 8005758:	10624dd3 	.word	0x10624dd3
 800575c:	e000e014 	.word	0xe000e014

08005760 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005766:	f3ef 8305 	mrs	r3, IPSR
 800576a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b0f      	cmp	r3, #15
 8005770:	d915      	bls.n	800579e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005772:	4a17      	ldr	r2, [pc, #92]	@ (80057d0 <vPortValidateInterruptPriority+0x70>)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800577c:	4b15      	ldr	r3, [pc, #84]	@ (80057d4 <vPortValidateInterruptPriority+0x74>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	7afa      	ldrb	r2, [r7, #11]
 8005782:	429a      	cmp	r2, r3
 8005784:	d20b      	bcs.n	800579e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	607b      	str	r3, [r7, #4]
}
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	e7fd      	b.n	800579a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800579e:	4b0e      	ldr	r3, [pc, #56]	@ (80057d8 <vPortValidateInterruptPriority+0x78>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80057a6:	4b0d      	ldr	r3, [pc, #52]	@ (80057dc <vPortValidateInterruptPriority+0x7c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d90b      	bls.n	80057c6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	603b      	str	r3, [r7, #0]
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	e7fd      	b.n	80057c2 <vPortValidateInterruptPriority+0x62>
	}
 80057c6:	bf00      	nop
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr
 80057d0:	e000e3f0 	.word	0xe000e3f0
 80057d4:	20000e0c 	.word	0x20000e0c
 80057d8:	e000ed0c 	.word	0xe000ed0c
 80057dc:	20000e10 	.word	0x20000e10

080057e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08a      	sub	sp, #40	@ 0x28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057ec:	f7fe fdea 	bl	80043c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057f0:	4b5c      	ldr	r3, [pc, #368]	@ (8005964 <pvPortMalloc+0x184>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057f8:	f000 f924 	bl	8005a44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057fc:	4b5a      	ldr	r3, [pc, #360]	@ (8005968 <pvPortMalloc+0x188>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4013      	ands	r3, r2
 8005804:	2b00      	cmp	r3, #0
 8005806:	f040 8095 	bne.w	8005934 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01e      	beq.n	800584e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005810:	2208      	movs	r2, #8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4413      	add	r3, r2
 8005816:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	2b00      	cmp	r3, #0
 8005820:	d015      	beq.n	800584e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f023 0307 	bic.w	r3, r3, #7
 8005828:	3308      	adds	r3, #8
 800582a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00b      	beq.n	800584e <pvPortMalloc+0x6e>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	617b      	str	r3, [r7, #20]
}
 8005848:	bf00      	nop
 800584a:	bf00      	nop
 800584c:	e7fd      	b.n	800584a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d06f      	beq.n	8005934 <pvPortMalloc+0x154>
 8005854:	4b45      	ldr	r3, [pc, #276]	@ (800596c <pvPortMalloc+0x18c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	d86a      	bhi.n	8005934 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800585e:	4b44      	ldr	r3, [pc, #272]	@ (8005970 <pvPortMalloc+0x190>)
 8005860:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005862:	4b43      	ldr	r3, [pc, #268]	@ (8005970 <pvPortMalloc+0x190>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005868:	e004      	b.n	8005874 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	429a      	cmp	r2, r3
 800587c:	d903      	bls.n	8005886 <pvPortMalloc+0xa6>
 800587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f1      	bne.n	800586a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005886:	4b37      	ldr	r3, [pc, #220]	@ (8005964 <pvPortMalloc+0x184>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800588c:	429a      	cmp	r2, r3
 800588e:	d051      	beq.n	8005934 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2208      	movs	r2, #8
 8005896:	4413      	add	r3, r2
 8005898:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	1ad2      	subs	r2, r2, r3
 80058aa:	2308      	movs	r3, #8
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d920      	bls.n	80058f4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4413      	add	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00b      	beq.n	80058dc <pvPortMalloc+0xfc>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	613b      	str	r3, [r7, #16]
}
 80058d6:	bf00      	nop
 80058d8:	bf00      	nop
 80058da:	e7fd      	b.n	80058d8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	1ad2      	subs	r2, r2, r3
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058ee:	69b8      	ldr	r0, [r7, #24]
 80058f0:	f000 f90a 	bl	8005b08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058f4:	4b1d      	ldr	r3, [pc, #116]	@ (800596c <pvPortMalloc+0x18c>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	4a1b      	ldr	r2, [pc, #108]	@ (800596c <pvPortMalloc+0x18c>)
 8005900:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005902:	4b1a      	ldr	r3, [pc, #104]	@ (800596c <pvPortMalloc+0x18c>)
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	4b1b      	ldr	r3, [pc, #108]	@ (8005974 <pvPortMalloc+0x194>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d203      	bcs.n	8005916 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800590e:	4b17      	ldr	r3, [pc, #92]	@ (800596c <pvPortMalloc+0x18c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a18      	ldr	r2, [pc, #96]	@ (8005974 <pvPortMalloc+0x194>)
 8005914:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	4b13      	ldr	r3, [pc, #76]	@ (8005968 <pvPortMalloc+0x188>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	431a      	orrs	r2, r3
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800592a:	4b13      	ldr	r3, [pc, #76]	@ (8005978 <pvPortMalloc+0x198>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3301      	adds	r3, #1
 8005930:	4a11      	ldr	r2, [pc, #68]	@ (8005978 <pvPortMalloc+0x198>)
 8005932:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005934:	f7fe fd54 	bl	80043e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00b      	beq.n	800595a <pvPortMalloc+0x17a>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	60fb      	str	r3, [r7, #12]
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop
 8005958:	e7fd      	b.n	8005956 <pvPortMalloc+0x176>
	return pvReturn;
 800595a:	69fb      	ldr	r3, [r7, #28]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3728      	adds	r7, #40	@ 0x28
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20001a1c 	.word	0x20001a1c
 8005968:	20001a30 	.word	0x20001a30
 800596c:	20001a20 	.word	0x20001a20
 8005970:	20001a14 	.word	0x20001a14
 8005974:	20001a24 	.word	0x20001a24
 8005978:	20001a28 	.word	0x20001a28

0800597c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d04f      	beq.n	8005a2e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800598e:	2308      	movs	r3, #8
 8005990:	425b      	negs	r3, r3
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4413      	add	r3, r2
 8005996:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	4b25      	ldr	r3, [pc, #148]	@ (8005a38 <vPortFree+0xbc>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <vPortFree+0x46>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	60fb      	str	r3, [r7, #12]
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	e7fd      	b.n	80059be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00b      	beq.n	80059e2 <vPortFree+0x66>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	60bb      	str	r3, [r7, #8]
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	e7fd      	b.n	80059de <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	4b14      	ldr	r3, [pc, #80]	@ (8005a38 <vPortFree+0xbc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4013      	ands	r3, r2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01e      	beq.n	8005a2e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d11a      	bne.n	8005a2e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005a38 <vPortFree+0xbc>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	43db      	mvns	r3, r3
 8005a02:	401a      	ands	r2, r3
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a08:	f7fe fcdc 	bl	80043c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	4b0a      	ldr	r3, [pc, #40]	@ (8005a3c <vPortFree+0xc0>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4413      	add	r3, r2
 8005a16:	4a09      	ldr	r2, [pc, #36]	@ (8005a3c <vPortFree+0xc0>)
 8005a18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a1a:	6938      	ldr	r0, [r7, #16]
 8005a1c:	f000 f874 	bl	8005b08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a20:	4b07      	ldr	r3, [pc, #28]	@ (8005a40 <vPortFree+0xc4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3301      	adds	r3, #1
 8005a26:	4a06      	ldr	r2, [pc, #24]	@ (8005a40 <vPortFree+0xc4>)
 8005a28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a2a:	f7fe fcd9 	bl	80043e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a2e:	bf00      	nop
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20001a30 	.word	0x20001a30
 8005a3c:	20001a20 	.word	0x20001a20
 8005a40:	20001a2c 	.word	0x20001a2c

08005a44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a4a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005a4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a50:	4b27      	ldr	r3, [pc, #156]	@ (8005af0 <prvHeapInit+0xac>)
 8005a52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00c      	beq.n	8005a78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3307      	adds	r3, #7
 8005a62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0307 	bic.w	r3, r3, #7
 8005a6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	4a1f      	ldr	r2, [pc, #124]	@ (8005af0 <prvHeapInit+0xac>)
 8005a74:	4413      	add	r3, r2
 8005a76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005af4 <prvHeapInit+0xb0>)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a82:	4b1c      	ldr	r3, [pc, #112]	@ (8005af4 <prvHeapInit+0xb0>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a90:	2208      	movs	r2, #8
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0307 	bic.w	r3, r3, #7
 8005a9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a15      	ldr	r2, [pc, #84]	@ (8005af8 <prvHeapInit+0xb4>)
 8005aa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005aa6:	4b14      	ldr	r3, [pc, #80]	@ (8005af8 <prvHeapInit+0xb4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005aae:	4b12      	ldr	r3, [pc, #72]	@ (8005af8 <prvHeapInit+0xb4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	1ad2      	subs	r2, r2, r3
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8005af8 <prvHeapInit+0xb4>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8005afc <prvHeapInit+0xb8>)
 8005ad2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	4a09      	ldr	r2, [pc, #36]	@ (8005b00 <prvHeapInit+0xbc>)
 8005ada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005adc:	4b09      	ldr	r3, [pc, #36]	@ (8005b04 <prvHeapInit+0xc0>)
 8005ade:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005ae2:	601a      	str	r2, [r3, #0]
}
 8005ae4:	bf00      	nop
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	20000e14 	.word	0x20000e14
 8005af4:	20001a14 	.word	0x20001a14
 8005af8:	20001a1c 	.word	0x20001a1c
 8005afc:	20001a24 	.word	0x20001a24
 8005b00:	20001a20 	.word	0x20001a20
 8005b04:	20001a30 	.word	0x20001a30

08005b08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b10:	4b27      	ldr	r3, [pc, #156]	@ (8005bb0 <prvInsertBlockIntoFreeList+0xa8>)
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e002      	b.n	8005b1c <prvInsertBlockIntoFreeList+0x14>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d8f7      	bhi.n	8005b16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4413      	add	r3, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d108      	bne.n	8005b4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	441a      	add	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	441a      	add	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d118      	bne.n	8005b90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b14      	ldr	r3, [pc, #80]	@ (8005bb4 <prvInsertBlockIntoFreeList+0xac>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d00d      	beq.n	8005b86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	441a      	add	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	e008      	b.n	8005b98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b86:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <prvInsertBlockIntoFreeList+0xac>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	e003      	b.n	8005b98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d002      	beq.n	8005ba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ba6:	bf00      	nop
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr
 8005bb0:	20001a14 	.word	0x20001a14
 8005bb4:	20001a1c 	.word	0x20001a1c

08005bb8 <memset>:
 8005bb8:	4603      	mov	r3, r0
 8005bba:	4402      	add	r2, r0
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d100      	bne.n	8005bc2 <memset+0xa>
 8005bc0:	4770      	bx	lr
 8005bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc6:	e7f9      	b.n	8005bbc <memset+0x4>

08005bc8 <__libc_init_array>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	2600      	movs	r6, #0
 8005bcc:	4d0c      	ldr	r5, [pc, #48]	@ (8005c00 <__libc_init_array+0x38>)
 8005bce:	4c0d      	ldr	r4, [pc, #52]	@ (8005c04 <__libc_init_array+0x3c>)
 8005bd0:	1b64      	subs	r4, r4, r5
 8005bd2:	10a4      	asrs	r4, r4, #2
 8005bd4:	42a6      	cmp	r6, r4
 8005bd6:	d109      	bne.n	8005bec <__libc_init_array+0x24>
 8005bd8:	f000 f828 	bl	8005c2c <_init>
 8005bdc:	2600      	movs	r6, #0
 8005bde:	4d0a      	ldr	r5, [pc, #40]	@ (8005c08 <__libc_init_array+0x40>)
 8005be0:	4c0a      	ldr	r4, [pc, #40]	@ (8005c0c <__libc_init_array+0x44>)
 8005be2:	1b64      	subs	r4, r4, r5
 8005be4:	10a4      	asrs	r4, r4, #2
 8005be6:	42a6      	cmp	r6, r4
 8005be8:	d105      	bne.n	8005bf6 <__libc_init_array+0x2e>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf0:	4798      	blx	r3
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7ee      	b.n	8005bd4 <__libc_init_array+0xc>
 8005bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfa:	4798      	blx	r3
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	e7f2      	b.n	8005be6 <__libc_init_array+0x1e>
 8005c00:	08005cb8 	.word	0x08005cb8
 8005c04:	08005cb8 	.word	0x08005cb8
 8005c08:	08005cb8 	.word	0x08005cb8
 8005c0c:	08005cbc 	.word	0x08005cbc

08005c10 <memcpy>:
 8005c10:	440a      	add	r2, r1
 8005c12:	4291      	cmp	r1, r2
 8005c14:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005c18:	d100      	bne.n	8005c1c <memcpy+0xc>
 8005c1a:	4770      	bx	lr
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c22:	4291      	cmp	r1, r2
 8005c24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c28:	d1f9      	bne.n	8005c1e <memcpy+0xe>
 8005c2a:	bd10      	pop	{r4, pc}

08005c2c <_init>:
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2e:	bf00      	nop
 8005c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c32:	bc08      	pop	{r3}
 8005c34:	469e      	mov	lr, r3
 8005c36:	4770      	bx	lr

08005c38 <_fini>:
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3a:	bf00      	nop
 8005c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3e:	bc08      	pop	{r3}
 8005c40:	469e      	mov	lr, r3
 8005c42:	4770      	bx	lr
